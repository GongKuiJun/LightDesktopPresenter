// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Server {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class LdpProtocol {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Server_LdpPacket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.LdpPacket, global::Server.LdpPacket.Builder> internal__static_Server_LdpPacket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_LdpAuthRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.LdpAuthRequest, global::Server.LdpAuthRequest.Builder> internal__static_Server_LdpAuthRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_LdpAuthResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.LdpAuthResponse, global::Server.LdpAuthResponse.Builder> internal__static_Server_LdpAuthResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_LdpImageData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.LdpImageData, global::Server.LdpImageData.Builder> internal__static_Server_LdpImageData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_LdpVolumeData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.LdpVolumeData, global::Server.LdpVolumeData.Builder> internal__static_Server_LdpVolumeData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_LdpMousePositionData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.LdpMousePositionData, global::Server.LdpMousePositionData.Builder> internal__static_Server_LdpMousePositionData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_LdpCursorData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.LdpCursorData, global::Server.LdpCursorData.Builder> internal__static_Server_LdpCursorData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_LdpKeyboardData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.LdpKeyboardData, global::Server.LdpKeyboardData.Builder> internal__static_Server_LdpKeyboardData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_LdpDisconnectRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.LdpDisconnectRequest, global::Server.LdpDisconnectRequest.Builder> internal__static_Server_LdpDisconnectRequest__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static LdpProtocol() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChFMZHBQcm90b2NvbC5wcm90bxIGU2VydmVyIs4BCglMZHBQYWNrZXQSJAoE" + 
          "dHlwZRgBIAIoDjIWLlNlcnZlci5MZHBQYWNrZXQuVHlwZSKaAQoEVHlwZRIQ" + 
          "CgxBVVRIX1JFUVVFU1QQARIRCg1BVVRIX1JFU1BPTlNFEAISDAoISU1HX0RB" + 
          "VEEQAxIPCgtWT0xVTUVfREFUQRAEEhIKDk1PVVNFX1BPU19EQVRBEAUSDwoL" + 
          "Q1VSU09SX0RBVEEQBhIRCg1LRVlCT0FSRF9EQVRBEAcSFgoSRElTQ09OTkVD" + 
          "VF9SRVFVRVNUEAgiIgoOTGRwQXV0aFJlcXVlc3QSEAoIcGFzc3dvcmQYASAC" + 
          "KAkiJAoPTGRwQXV0aFJlc3BvbnNlEhEKCWlzU3VjY2VzcxgBIAIoCCJNCgxM" + 
          "ZHBJbWFnZURhdGESEgoKY29tcHJlc3NlZBgBIAIoDBISCgpiYXNlTGVuZ2h0" + 
          "GAIgAigFEhUKDWJsb2NrUG9zaXRpb24YAyACKAUiDwoNTGRwVm9sdW1lRGF0" + 
          "YSI2ChRMZHBNb3VzZVBvc2l0aW9uRGF0YRIOCgZtb3VzZVgYASACKAUSDgoG" + 
          "bW91c2VZGAIgAigFIg8KDUxkcEN1cnNvckRhdGEiEQoPTGRwS2V5Ym9hcmRE" + 
          "YXRhIhYKFExkcERpc2Nvbm5lY3RSZXF1ZXN0QgJIAQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Server_LdpPacket__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Server_LdpPacket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.LdpPacket, global::Server.LdpPacket.Builder>(internal__static_Server_LdpPacket__Descriptor,
                new string[] { "Type", });
        internal__static_Server_LdpAuthRequest__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Server_LdpAuthRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.LdpAuthRequest, global::Server.LdpAuthRequest.Builder>(internal__static_Server_LdpAuthRequest__Descriptor,
                new string[] { "Password", });
        internal__static_Server_LdpAuthResponse__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Server_LdpAuthResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.LdpAuthResponse, global::Server.LdpAuthResponse.Builder>(internal__static_Server_LdpAuthResponse__Descriptor,
                new string[] { "IsSuccess", });
        internal__static_Server_LdpImageData__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Server_LdpImageData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.LdpImageData, global::Server.LdpImageData.Builder>(internal__static_Server_LdpImageData__Descriptor,
                new string[] { "Compressed", "BaseLenght", "BlockPosition", });
        internal__static_Server_LdpVolumeData__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Server_LdpVolumeData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.LdpVolumeData, global::Server.LdpVolumeData.Builder>(internal__static_Server_LdpVolumeData__Descriptor,
                new string[] { });
        internal__static_Server_LdpMousePositionData__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Server_LdpMousePositionData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.LdpMousePositionData, global::Server.LdpMousePositionData.Builder>(internal__static_Server_LdpMousePositionData__Descriptor,
                new string[] { "MouseX", "MouseY", });
        internal__static_Server_LdpCursorData__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Server_LdpCursorData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.LdpCursorData, global::Server.LdpCursorData.Builder>(internal__static_Server_LdpCursorData__Descriptor,
                new string[] { });
        internal__static_Server_LdpKeyboardData__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Server_LdpKeyboardData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.LdpKeyboardData, global::Server.LdpKeyboardData.Builder>(internal__static_Server_LdpKeyboardData__Descriptor,
                new string[] { });
        internal__static_Server_LdpDisconnectRequest__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Server_LdpDisconnectRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.LdpDisconnectRequest, global::Server.LdpDisconnectRequest.Builder>(internal__static_Server_LdpDisconnectRequest__Descriptor,
                new string[] { });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpPacket : pb::GeneratedMessage<LdpPacket, LdpPacket.Builder> {
    private LdpPacket() { }
    private static readonly LdpPacket defaultInstance = new LdpPacket().MakeReadOnly();
    private static readonly string[] _ldpPacketFieldNames = new string[] { "type" };
    private static readonly uint[] _ldpPacketFieldTags = new uint[] { 8 };
    public static LdpPacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpPacket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpPacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpPacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpPacket, LdpPacket.Builder> InternalFieldAccessors {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpPacket__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        AUTH_REQUEST = 1,
        AUTH_RESPONSE = 2,
        IMG_DATA = 3,
        VOLUME_DATA = 4,
        MOUSE_POS_DATA = 5,
        CURSOR_DATA = 6,
        KEYBOARD_DATA = 7,
        DISCONNECT_REQUEST = 8,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::Server.LdpPacket.Types.Type type_ = global::Server.LdpPacket.Types.Type.AUTH_REQUEST;
    public bool HasType {
      get { return hasType; }
    }
    public global::Server.LdpPacket.Types.Type Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpPacketFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[0], (int) Type, Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpPacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpPacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpPacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpPacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpPacket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpPacket MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpPacket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpPacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpPacket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpPacket result;
      
      private LdpPacket PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpPacket original = result;
          result = new LdpPacket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpPacket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.LdpPacket.Descriptor; }
      }
      
      public override LdpPacket DefaultInstanceForType {
        get { return global::Server.LdpPacket.DefaultInstance; }
      }
      
      public override LdpPacket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpPacket) {
          return MergeFrom((LdpPacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpPacket other) {
        if (other == global::Server.LdpPacket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpPacketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Server.LdpPacket.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Server.LdpPacket.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Server.LdpPacket.Types.Type.AUTH_REQUEST;
        return this;
      }
    }
    static LdpPacket() {
      object.ReferenceEquals(global::Server.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpAuthRequest : pb::GeneratedMessage<LdpAuthRequest, LdpAuthRequest.Builder> {
    private LdpAuthRequest() { }
    private static readonly LdpAuthRequest defaultInstance = new LdpAuthRequest().MakeReadOnly();
    private static readonly string[] _ldpAuthRequestFieldNames = new string[] { "password" };
    private static readonly uint[] _ldpAuthRequestFieldTags = new uint[] { 10 };
    public static LdpAuthRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpAuthRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpAuthRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpAuthRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpAuthRequest, LdpAuthRequest.Builder> InternalFieldAccessors {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpAuthRequest__FieldAccessorTable; }
    }
    
    public const int PasswordFieldNumber = 1;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPassword) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpAuthRequestFieldNames;
      if (hasPassword) {
        output.WriteString(1, field_names[0], Password);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Password);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpAuthRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpAuthRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpAuthRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpAuthRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpAuthRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpAuthRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpAuthRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpAuthRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpAuthRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpAuthRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpAuthRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpAuthRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpAuthRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpAuthRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpAuthRequest result;
      
      private LdpAuthRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpAuthRequest original = result;
          result = new LdpAuthRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpAuthRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.LdpAuthRequest.Descriptor; }
      }
      
      public override LdpAuthRequest DefaultInstanceForType {
        get { return global::Server.LdpAuthRequest.DefaultInstance; }
      }
      
      public override LdpAuthRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpAuthRequest) {
          return MergeFrom((LdpAuthRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpAuthRequest other) {
        if (other == global::Server.LdpAuthRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPassword) {
          Password = other.Password;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpAuthRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpAuthRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
    }
    static LdpAuthRequest() {
      object.ReferenceEquals(global::Server.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpAuthResponse : pb::GeneratedMessage<LdpAuthResponse, LdpAuthResponse.Builder> {
    private LdpAuthResponse() { }
    private static readonly LdpAuthResponse defaultInstance = new LdpAuthResponse().MakeReadOnly();
    private static readonly string[] _ldpAuthResponseFieldNames = new string[] { "isSuccess" };
    private static readonly uint[] _ldpAuthResponseFieldTags = new uint[] { 8 };
    public static LdpAuthResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpAuthResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpAuthResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpAuthResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpAuthResponse, LdpAuthResponse.Builder> InternalFieldAccessors {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpAuthResponse__FieldAccessorTable; }
    }
    
    public const int IsSuccessFieldNumber = 1;
    private bool hasIsSuccess;
    private bool isSuccess_;
    public bool HasIsSuccess {
      get { return hasIsSuccess; }
    }
    public bool IsSuccess {
      get { return isSuccess_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIsSuccess) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpAuthResponseFieldNames;
      if (hasIsSuccess) {
        output.WriteBool(1, field_names[0], IsSuccess);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIsSuccess) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, IsSuccess);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpAuthResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpAuthResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpAuthResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpAuthResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpAuthResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpAuthResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpAuthResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpAuthResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpAuthResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpAuthResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpAuthResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpAuthResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpAuthResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpAuthResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpAuthResponse result;
      
      private LdpAuthResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpAuthResponse original = result;
          result = new LdpAuthResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpAuthResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.LdpAuthResponse.Descriptor; }
      }
      
      public override LdpAuthResponse DefaultInstanceForType {
        get { return global::Server.LdpAuthResponse.DefaultInstance; }
      }
      
      public override LdpAuthResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpAuthResponse) {
          return MergeFrom((LdpAuthResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpAuthResponse other) {
        if (other == global::Server.LdpAuthResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsSuccess) {
          IsSuccess = other.IsSuccess;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpAuthResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpAuthResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsSuccess = input.ReadBool(ref result.isSuccess_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIsSuccess {
        get { return result.hasIsSuccess; }
      }
      public bool IsSuccess {
        get { return result.IsSuccess; }
        set { SetIsSuccess(value); }
      }
      public Builder SetIsSuccess(bool value) {
        PrepareBuilder();
        result.hasIsSuccess = true;
        result.isSuccess_ = value;
        return this;
      }
      public Builder ClearIsSuccess() {
        PrepareBuilder();
        result.hasIsSuccess = false;
        result.isSuccess_ = false;
        return this;
      }
    }
    static LdpAuthResponse() {
      object.ReferenceEquals(global::Server.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpImageData : pb::GeneratedMessage<LdpImageData, LdpImageData.Builder> {
    private LdpImageData() { }
    private static readonly LdpImageData defaultInstance = new LdpImageData().MakeReadOnly();
    private static readonly string[] _ldpImageDataFieldNames = new string[] { "baseLenght", "blockPosition", "compressed" };
    private static readonly uint[] _ldpImageDataFieldTags = new uint[] { 16, 24, 10 };
    public static LdpImageData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpImageData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpImageData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpImageData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpImageData, LdpImageData.Builder> InternalFieldAccessors {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpImageData__FieldAccessorTable; }
    }
    
    public const int CompressedFieldNumber = 1;
    private bool hasCompressed;
    private pb::ByteString compressed_ = pb::ByteString.Empty;
    public bool HasCompressed {
      get { return hasCompressed; }
    }
    public pb::ByteString Compressed {
      get { return compressed_; }
    }
    
    public const int BaseLenghtFieldNumber = 2;
    private bool hasBaseLenght;
    private int baseLenght_;
    public bool HasBaseLenght {
      get { return hasBaseLenght; }
    }
    public int BaseLenght {
      get { return baseLenght_; }
    }
    
    public const int BlockPositionFieldNumber = 3;
    private bool hasBlockPosition;
    private int blockPosition_;
    public bool HasBlockPosition {
      get { return hasBlockPosition; }
    }
    public int BlockPosition {
      get { return blockPosition_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCompressed) return false;
        if (!hasBaseLenght) return false;
        if (!hasBlockPosition) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpImageDataFieldNames;
      if (hasCompressed) {
        output.WriteBytes(1, field_names[2], Compressed);
      }
      if (hasBaseLenght) {
        output.WriteInt32(2, field_names[0], BaseLenght);
      }
      if (hasBlockPosition) {
        output.WriteInt32(3, field_names[1], BlockPosition);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCompressed) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Compressed);
        }
        if (hasBaseLenght) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, BaseLenght);
        }
        if (hasBlockPosition) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, BlockPosition);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpImageData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpImageData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpImageData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpImageData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpImageData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpImageData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpImageData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpImageData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpImageData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpImageData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpImageData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpImageData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpImageData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpImageData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpImageData result;
      
      private LdpImageData PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpImageData original = result;
          result = new LdpImageData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpImageData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.LdpImageData.Descriptor; }
      }
      
      public override LdpImageData DefaultInstanceForType {
        get { return global::Server.LdpImageData.DefaultInstance; }
      }
      
      public override LdpImageData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpImageData) {
          return MergeFrom((LdpImageData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpImageData other) {
        if (other == global::Server.LdpImageData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCompressed) {
          Compressed = other.Compressed;
        }
        if (other.HasBaseLenght) {
          BaseLenght = other.BaseLenght;
        }
        if (other.HasBlockPosition) {
          BlockPosition = other.BlockPosition;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpImageDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpImageDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCompressed = input.ReadBytes(ref result.compressed_);
              break;
            }
            case 16: {
              result.hasBaseLenght = input.ReadInt32(ref result.baseLenght_);
              break;
            }
            case 24: {
              result.hasBlockPosition = input.ReadInt32(ref result.blockPosition_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCompressed {
        get { return result.hasCompressed; }
      }
      public pb::ByteString Compressed {
        get { return result.Compressed; }
        set { SetCompressed(value); }
      }
      public Builder SetCompressed(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCompressed = true;
        result.compressed_ = value;
        return this;
      }
      public Builder ClearCompressed() {
        PrepareBuilder();
        result.hasCompressed = false;
        result.compressed_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasBaseLenght {
        get { return result.hasBaseLenght; }
      }
      public int BaseLenght {
        get { return result.BaseLenght; }
        set { SetBaseLenght(value); }
      }
      public Builder SetBaseLenght(int value) {
        PrepareBuilder();
        result.hasBaseLenght = true;
        result.baseLenght_ = value;
        return this;
      }
      public Builder ClearBaseLenght() {
        PrepareBuilder();
        result.hasBaseLenght = false;
        result.baseLenght_ = 0;
        return this;
      }
      
      public bool HasBlockPosition {
        get { return result.hasBlockPosition; }
      }
      public int BlockPosition {
        get { return result.BlockPosition; }
        set { SetBlockPosition(value); }
      }
      public Builder SetBlockPosition(int value) {
        PrepareBuilder();
        result.hasBlockPosition = true;
        result.blockPosition_ = value;
        return this;
      }
      public Builder ClearBlockPosition() {
        PrepareBuilder();
        result.hasBlockPosition = false;
        result.blockPosition_ = 0;
        return this;
      }
    }
    static LdpImageData() {
      object.ReferenceEquals(global::Server.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpVolumeData : pb::GeneratedMessage<LdpVolumeData, LdpVolumeData.Builder> {
    private LdpVolumeData() { }
    private static readonly LdpVolumeData defaultInstance = new LdpVolumeData().MakeReadOnly();
    private static readonly string[] _ldpVolumeDataFieldNames = new string[] {  };
    private static readonly uint[] _ldpVolumeDataFieldTags = new uint[] {  };
    public static LdpVolumeData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpVolumeData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpVolumeData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpVolumeData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpVolumeData, LdpVolumeData.Builder> InternalFieldAccessors {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpVolumeData__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpVolumeDataFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpVolumeData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpVolumeData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpVolumeData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpVolumeData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpVolumeData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpVolumeData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpVolumeData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpVolumeData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpVolumeData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpVolumeData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpVolumeData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpVolumeData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpVolumeData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpVolumeData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpVolumeData result;
      
      private LdpVolumeData PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpVolumeData original = result;
          result = new LdpVolumeData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpVolumeData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.LdpVolumeData.Descriptor; }
      }
      
      public override LdpVolumeData DefaultInstanceForType {
        get { return global::Server.LdpVolumeData.DefaultInstance; }
      }
      
      public override LdpVolumeData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpVolumeData) {
          return MergeFrom((LdpVolumeData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpVolumeData other) {
        if (other == global::Server.LdpVolumeData.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpVolumeDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpVolumeDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static LdpVolumeData() {
      object.ReferenceEquals(global::Server.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpMousePositionData : pb::GeneratedMessage<LdpMousePositionData, LdpMousePositionData.Builder> {
    private LdpMousePositionData() { }
    private static readonly LdpMousePositionData defaultInstance = new LdpMousePositionData().MakeReadOnly();
    private static readonly string[] _ldpMousePositionDataFieldNames = new string[] { "mouseX", "mouseY" };
    private static readonly uint[] _ldpMousePositionDataFieldTags = new uint[] { 8, 16 };
    public static LdpMousePositionData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpMousePositionData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpMousePositionData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpMousePositionData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpMousePositionData, LdpMousePositionData.Builder> InternalFieldAccessors {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpMousePositionData__FieldAccessorTable; }
    }
    
    public const int MouseXFieldNumber = 1;
    private bool hasMouseX;
    private int mouseX_;
    public bool HasMouseX {
      get { return hasMouseX; }
    }
    public int MouseX {
      get { return mouseX_; }
    }
    
    public const int MouseYFieldNumber = 2;
    private bool hasMouseY;
    private int mouseY_;
    public bool HasMouseY {
      get { return hasMouseY; }
    }
    public int MouseY {
      get { return mouseY_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMouseX) return false;
        if (!hasMouseY) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpMousePositionDataFieldNames;
      if (hasMouseX) {
        output.WriteInt32(1, field_names[0], MouseX);
      }
      if (hasMouseY) {
        output.WriteInt32(2, field_names[1], MouseY);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMouseX) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, MouseX);
        }
        if (hasMouseY) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, MouseY);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpMousePositionData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpMousePositionData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpMousePositionData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpMousePositionData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpMousePositionData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpMousePositionData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpMousePositionData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpMousePositionData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpMousePositionData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpMousePositionData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpMousePositionData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpMousePositionData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpMousePositionData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpMousePositionData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpMousePositionData result;
      
      private LdpMousePositionData PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpMousePositionData original = result;
          result = new LdpMousePositionData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpMousePositionData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.LdpMousePositionData.Descriptor; }
      }
      
      public override LdpMousePositionData DefaultInstanceForType {
        get { return global::Server.LdpMousePositionData.DefaultInstance; }
      }
      
      public override LdpMousePositionData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpMousePositionData) {
          return MergeFrom((LdpMousePositionData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpMousePositionData other) {
        if (other == global::Server.LdpMousePositionData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMouseX) {
          MouseX = other.MouseX;
        }
        if (other.HasMouseY) {
          MouseY = other.MouseY;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpMousePositionDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpMousePositionDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMouseX = input.ReadInt32(ref result.mouseX_);
              break;
            }
            case 16: {
              result.hasMouseY = input.ReadInt32(ref result.mouseY_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMouseX {
        get { return result.hasMouseX; }
      }
      public int MouseX {
        get { return result.MouseX; }
        set { SetMouseX(value); }
      }
      public Builder SetMouseX(int value) {
        PrepareBuilder();
        result.hasMouseX = true;
        result.mouseX_ = value;
        return this;
      }
      public Builder ClearMouseX() {
        PrepareBuilder();
        result.hasMouseX = false;
        result.mouseX_ = 0;
        return this;
      }
      
      public bool HasMouseY {
        get { return result.hasMouseY; }
      }
      public int MouseY {
        get { return result.MouseY; }
        set { SetMouseY(value); }
      }
      public Builder SetMouseY(int value) {
        PrepareBuilder();
        result.hasMouseY = true;
        result.mouseY_ = value;
        return this;
      }
      public Builder ClearMouseY() {
        PrepareBuilder();
        result.hasMouseY = false;
        result.mouseY_ = 0;
        return this;
      }
    }
    static LdpMousePositionData() {
      object.ReferenceEquals(global::Server.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpCursorData : pb::GeneratedMessage<LdpCursorData, LdpCursorData.Builder> {
    private LdpCursorData() { }
    private static readonly LdpCursorData defaultInstance = new LdpCursorData().MakeReadOnly();
    private static readonly string[] _ldpCursorDataFieldNames = new string[] {  };
    private static readonly uint[] _ldpCursorDataFieldTags = new uint[] {  };
    public static LdpCursorData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpCursorData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpCursorData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpCursorData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpCursorData, LdpCursorData.Builder> InternalFieldAccessors {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpCursorData__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpCursorDataFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpCursorData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpCursorData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpCursorData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpCursorData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpCursorData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpCursorData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpCursorData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpCursorData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpCursorData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpCursorData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpCursorData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpCursorData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpCursorData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpCursorData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpCursorData result;
      
      private LdpCursorData PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpCursorData original = result;
          result = new LdpCursorData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpCursorData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.LdpCursorData.Descriptor; }
      }
      
      public override LdpCursorData DefaultInstanceForType {
        get { return global::Server.LdpCursorData.DefaultInstance; }
      }
      
      public override LdpCursorData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpCursorData) {
          return MergeFrom((LdpCursorData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpCursorData other) {
        if (other == global::Server.LdpCursorData.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpCursorDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpCursorDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static LdpCursorData() {
      object.ReferenceEquals(global::Server.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpKeyboardData : pb::GeneratedMessage<LdpKeyboardData, LdpKeyboardData.Builder> {
    private LdpKeyboardData() { }
    private static readonly LdpKeyboardData defaultInstance = new LdpKeyboardData().MakeReadOnly();
    private static readonly string[] _ldpKeyboardDataFieldNames = new string[] {  };
    private static readonly uint[] _ldpKeyboardDataFieldTags = new uint[] {  };
    public static LdpKeyboardData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpKeyboardData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpKeyboardData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpKeyboardData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpKeyboardData, LdpKeyboardData.Builder> InternalFieldAccessors {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpKeyboardData__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpKeyboardDataFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpKeyboardData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpKeyboardData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpKeyboardData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpKeyboardData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpKeyboardData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpKeyboardData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpKeyboardData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpKeyboardData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpKeyboardData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpKeyboardData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpKeyboardData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpKeyboardData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpKeyboardData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpKeyboardData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpKeyboardData result;
      
      private LdpKeyboardData PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpKeyboardData original = result;
          result = new LdpKeyboardData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpKeyboardData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.LdpKeyboardData.Descriptor; }
      }
      
      public override LdpKeyboardData DefaultInstanceForType {
        get { return global::Server.LdpKeyboardData.DefaultInstance; }
      }
      
      public override LdpKeyboardData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpKeyboardData) {
          return MergeFrom((LdpKeyboardData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpKeyboardData other) {
        if (other == global::Server.LdpKeyboardData.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpKeyboardDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpKeyboardDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static LdpKeyboardData() {
      object.ReferenceEquals(global::Server.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpDisconnectRequest : pb::GeneratedMessage<LdpDisconnectRequest, LdpDisconnectRequest.Builder> {
    private LdpDisconnectRequest() { }
    private static readonly LdpDisconnectRequest defaultInstance = new LdpDisconnectRequest().MakeReadOnly();
    private static readonly string[] _ldpDisconnectRequestFieldNames = new string[] {  };
    private static readonly uint[] _ldpDisconnectRequestFieldTags = new uint[] {  };
    public static LdpDisconnectRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpDisconnectRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpDisconnectRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpDisconnectRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpDisconnectRequest, LdpDisconnectRequest.Builder> InternalFieldAccessors {
      get { return global::Server.LdpProtocol.internal__static_Server_LdpDisconnectRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpDisconnectRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpDisconnectRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpDisconnectRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpDisconnectRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpDisconnectRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpDisconnectRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpDisconnectRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpDisconnectRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpDisconnectRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpDisconnectRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpDisconnectRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpDisconnectRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpDisconnectRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpDisconnectRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpDisconnectRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpDisconnectRequest result;
      
      private LdpDisconnectRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpDisconnectRequest original = result;
          result = new LdpDisconnectRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpDisconnectRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.LdpDisconnectRequest.Descriptor; }
      }
      
      public override LdpDisconnectRequest DefaultInstanceForType {
        get { return global::Server.LdpDisconnectRequest.DefaultInstance; }
      }
      
      public override LdpDisconnectRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpDisconnectRequest) {
          return MergeFrom((LdpDisconnectRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpDisconnectRequest other) {
        if (other == global::Server.LdpDisconnectRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpDisconnectRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpDisconnectRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static LdpDisconnectRequest() {
      object.ReferenceEquals(global::Server.LdpProtocol.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
