// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Server.Protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class LdpProtocol {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Server_Protocol_LdpAuthRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpAuthRequest, global::Server.Protocol.LdpAuthRequest.Builder> internal__static_Server_Protocol_LdpAuthRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_Protocol_LdpAuthResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpAuthResponse, global::Server.Protocol.LdpAuthResponse.Builder> internal__static_Server_Protocol_LdpAuthResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_Protocol_LdpClientInfoRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpClientInfoRequest, global::Server.Protocol.LdpClientInfoRequest.Builder> internal__static_Server_Protocol_LdpClientInfoRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_Protocol_LdpDisconnectRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpDisconnectRequest, global::Server.Protocol.LdpDisconnectRequest.Builder> internal__static_Server_Protocol_LdpDisconnectRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_Protocol_LdpKeyboardInfoResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpKeyboardInfoResponse, global::Server.Protocol.LdpKeyboardInfoResponse.Builder> internal__static_Server_Protocol_LdpKeyboardInfoResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_Protocol_LdpMouseInfoResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpMouseInfoResponse, global::Server.Protocol.LdpMouseInfoResponse.Builder> internal__static_Server_Protocol_LdpMouseInfoResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_Protocol_LdpPacket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpPacket, global::Server.Protocol.LdpPacket.Builder> internal__static_Server_Protocol_LdpPacket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_Protocol_LdpPreparableInfoRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpPreparableInfoRequest, global::Server.Protocol.LdpPreparableInfoRequest.Builder> internal__static_Server_Protocol_LdpPreparableInfoRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_Protocol_LdpPreparableDesktopInfoResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpPreparableDesktopInfoResponse, global::Server.Protocol.LdpPreparableDesktopInfoResponse.Builder> internal__static_Server_Protocol_LdpPreparableDesktopInfoResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_Protocol_LdpRectangle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpRectangle, global::Server.Protocol.LdpRectangle.Builder> internal__static_Server_Protocol_LdpRectangle__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_Protocol_LdpScreenRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpScreenRequest, global::Server.Protocol.LdpScreenRequest.Builder> internal__static_Server_Protocol_LdpScreenRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_Protocol_LdpScreenResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpScreenResponse, global::Server.Protocol.LdpScreenResponse.Builder> internal__static_Server_Protocol_LdpScreenResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_Protocol_LdpPreparableVolumeInfoResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpPreparableVolumeInfoResponse, global::Server.Protocol.LdpPreparableVolumeInfoResponse.Builder> internal__static_Server_Protocol_LdpPreparableVolumeInfoResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Server_Protocol_LdpVolumeInfoResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpVolumeInfoResponse, global::Server.Protocol.LdpVolumeInfoResponse.Builder> internal__static_Server_Protocol_LdpVolumeInfoResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static LdpProtocol() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChFMZHBQcm90b2NvbC5wcm90bxIPU2VydmVyLlByb3RvY29sIiIKDkxkcEF1" + 
          "dGhSZXF1ZXN0EhAKCFBhc3N3b3JkGAEgASgJIiQKD0xkcEF1dGhSZXNwb25z" + 
          "ZRIRCglpc1N1Y2Nlc3MYASACKAgiQgoUTGRwQ2xpZW50SW5mb1JlcXVlc3QS" + 
          "CgoCSVAYASACKAkSCgoCT1MYAiACKAkSEgoKRGV2aWNlTmFtZRgDIAIoCSJI" + 
          "ChRMZHBEaXNjb25uZWN0UmVxdWVzdBIwCgRUeXBlGAEgAigOMiIuU2VydmVy" + 
          "LlByb3RvY29sLkRpc2Nvbm5lY3Rpb25UeXBlIiYKF0xkcEtleWJvYXJkSW5m" + 
          "b1Jlc3BvbnNlEgsKA0tleRgBIAEoCSJWChRMZHBNb3VzZUluZm9SZXNwb25z" + 
          "ZRIoCgRUeXBlGAEgAigOMhouU2VydmVyLlByb3RvY29sLk1vdXNlVHlwZRIJ" + 
          "CgFYGAIgASgFEgkKAVkYAyABKAUi5AYKCUxkcFBhY2tldBIpCgRUeXBlGAEg" + 
          "AigOMhsuU2VydmVyLlByb3RvY29sLlBhY2tldFR5cGUSNAoLQXV0aFJlcXVl" + 
          "c3QYAiABKAsyHy5TZXJ2ZXIuUHJvdG9jb2wuTGRwQXV0aFJlcXVlc3QSNgoM" + 
          "QXV0aFJlc3BvbnNlGAMgASgLMiAuU2VydmVyLlByb3RvY29sLkxkcEF1dGhS" + 
          "ZXNwb25zZRJAChFDbGllbnRJbmZvUmVxdWVzdBgEIAEoCzIlLlNlcnZlci5Q" + 
          "cm90b2NvbC5MZHBDbGllbnRJbmZvUmVxdWVzdBJIChVQcmVwYXJhYmxlSW5m" + 
          "b1JlcXVlc3QYBSABKAsyKS5TZXJ2ZXIuUHJvdG9jb2wuTGRwUHJlcGFyYWJs" + 
          "ZUluZm9SZXF1ZXN0ElQKGVByZXBhcmFibGVEZXNrdG9wUmVzcG9uc2UYBiAB" + 
          "KAsyMS5TZXJ2ZXIuUHJvdG9jb2wuTGRwUHJlcGFyYWJsZURlc2t0b3BJbmZv" + 
          "UmVzcG9uc2USOAoNU2NyZWVuUmVxdWVzdBgHIAEoCzIhLlNlcnZlci5Qcm90" + 
          "b2NvbC5MZHBTY3JlZW5SZXF1ZXN0EjoKDlNjcmVlblJlc3BvbnNlGAggASgL" + 
          "MiIuU2VydmVyLlByb3RvY29sLkxkcFNjcmVlblJlc3BvbnNlEkAKEURpc2Nv" + 
          "bm5lY3RSZXF1ZXN0GAkgASgLMiUuU2VydmVyLlByb3RvY29sLkxkcERpc2Nv" + 
          "bm5lY3RSZXF1ZXN0EkAKEU1vdXNlSW5mb1Jlc3BvbnNlGAogASgLMiUuU2Vy" + 
          "dmVyLlByb3RvY29sLkxkcE1vdXNlSW5mb1Jlc3BvbnNlEkYKFEtleWJvYXJk" + 
          "SW5mb1Jlc3BvbnNlGAsgASgLMiguU2VydmVyLlByb3RvY29sLkxkcEtleWJv" + 
          "YXJkSW5mb1Jlc3BvbnNlElYKHFByZXBhcmFibGVWb2x1bWVJbmZvUmVzcG9u" + 
          "c2UYDCABKAsyMC5TZXJ2ZXIuUHJvdG9jb2wuTGRwUHJlcGFyYWJsZVZvbHVt" + 
          "ZUluZm9SZXNwb25zZRJCChJWb2x1bWVJbmZvUmVzcG9uc2UYDSABKAsyJi5T" + 
          "ZXJ2ZXIuUHJvdG9jb2wuTGRwVm9sdW1lSW5mb1Jlc3BvbnNlIkkKGExkcFBy" + 
          "ZXBhcmFibGVJbmZvUmVxdWVzdBItCgRUeXBlGAEgAigOMh8uU2VydmVyLlBy" + 
          "b3RvY29sLkNvbm5lY3Rpb25UeXBlIk0KIExkcFByZXBhcmFibGVEZXNrdG9w" + 
          "SW5mb1Jlc3BvbnNlEhMKC1NjcmVlbldpZHRoGAEgASgFEhQKDFNjcmVlbkhl" + 
          "aWdodBgCIAEoBSJICgxMZHBSZWN0YW5nbGUSDAoETGVmdBgBIAIoBRILCgNU" + 
          "b3AYAiACKAUSDQoFUmlnaHQYAyACKAUSDgoGQm90dG9tGAQgAigFIhIKEExk" + 
          "cFNjcmVlblJlcXVlc3QibgoRTGRwU2NyZWVuUmVzcG9uc2USGAoQQ29tcHJl" + 
          "c3NlZFNjcmVlbhgBIAIoDBISCgpCYXNlTGVuZ2h0GAIgAigFEisKBFJlY3QY" + 
          "AyACKAsyHS5TZXJ2ZXIuUHJvdG9jb2wuTGRwUmVjdGFuZ2xlIkEKH0xkcFBy" + 
          "ZXBhcmFibGVWb2x1bWVJbmZvUmVzcG9uc2USDgoGVm9sdW1lGAEgASgFEg4K" + 
          "BklzTXV0ZRgCIAEoCCJmChVMZHBWb2x1bWVJbmZvUmVzcG9uc2USLQoEVHlw" + 
          "ZRgBIAIoDjIfLlNlcnZlci5Qcm90b2NvbC5Wb2x1bWVJbmZvVHlwZRIOCgZW" + 
          "b2x1bWUYAiABKAUSDgoGSXNNdXRlGAMgASgIKiYKDlZvbHVtZUluZm9UeXBl" + 
          "EgoKBlZPTFVNRRABEggKBE1VVEUQAipHCg5Db25uZWN0aW9uVHlwZRIaChZS" + 
          "RU1PVEVfREVTS1RPUF9DT05UUk9MEAESGQoVUkVNT1RFX1ZPTFVNRV9DT05U" + 
          "Uk9MEAIqVAoRRGlzY29ubmVjdGlvblR5cGUSDwoLRlJPTV9TRVJWRVIQARIW" + 
          "ChJGUk9NX1NDUkVFTl9USFJFQUQQAhIWChJGUk9NX1ZPTFVNRV9USFJFQUQQ" + 
          "AypXCglNb3VzZVR5cGUSDgoKTEVGVF9DTElDSxABEg8KC1JJR0hUX0NMSUNL" + 
          "EAISFQoRTEVGVF9ET1VCTEVfQ0xJQ0sQAxISCg5TRVRfQ1VSU09SX1BPUxAE" + 
          "KsICCgpQYWNrZXRUeXBlEhAKDEFVVEhfUkVRVUVTVBABEhEKDUFVVEhfUkVT" + 
          "UE9OU0UQAhIXChNDTElFTlRfSU5GT19SRVFVRVNUEAMSGwoXUFJFUEFSQUJM" + 
          "RV9JTkZPX1JFUVVFU1QQBBIkCiBQUkVQQVJBQkxFX0RFU0tUT1BfSU5GT19S" + 
          "RVNQT05TRRAFEhIKDlNDUkVFTl9SRVFVRVNUEAYSEwoPU0NSRUVOX1JFU1BP" + 
          "TlNFEAcSIwofUFJFUEFSQUJMRV9WT0xVTUVfSU5GT19SRVNQT05TRRAIEhgK" + 
          "FFZPTFVNRV9JTkZPX1JFU1BPTlNFEAkSFwoTTU9VU0VfSU5GT19SRVNQT05T" + 
          "RRAKEhoKFktFWUJPQVJEX0lORk9fUkVTUE9OU0UQCxIWChJESVNDT05ORUNU" + 
          "X1JFUVVFU1QQDEICSAE=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Server_Protocol_LdpAuthRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Server_Protocol_LdpAuthRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpAuthRequest, global::Server.Protocol.LdpAuthRequest.Builder>(internal__static_Server_Protocol_LdpAuthRequest__Descriptor,
                new string[] { "Password", });
        internal__static_Server_Protocol_LdpAuthResponse__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Server_Protocol_LdpAuthResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpAuthResponse, global::Server.Protocol.LdpAuthResponse.Builder>(internal__static_Server_Protocol_LdpAuthResponse__Descriptor,
                new string[] { "IsSuccess", });
        internal__static_Server_Protocol_LdpClientInfoRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Server_Protocol_LdpClientInfoRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpClientInfoRequest, global::Server.Protocol.LdpClientInfoRequest.Builder>(internal__static_Server_Protocol_LdpClientInfoRequest__Descriptor,
                new string[] { "IP", "OS", "DeviceName", });
        internal__static_Server_Protocol_LdpDisconnectRequest__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Server_Protocol_LdpDisconnectRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpDisconnectRequest, global::Server.Protocol.LdpDisconnectRequest.Builder>(internal__static_Server_Protocol_LdpDisconnectRequest__Descriptor,
                new string[] { "Type", });
        internal__static_Server_Protocol_LdpKeyboardInfoResponse__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Server_Protocol_LdpKeyboardInfoResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpKeyboardInfoResponse, global::Server.Protocol.LdpKeyboardInfoResponse.Builder>(internal__static_Server_Protocol_LdpKeyboardInfoResponse__Descriptor,
                new string[] { "Key", });
        internal__static_Server_Protocol_LdpMouseInfoResponse__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Server_Protocol_LdpMouseInfoResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpMouseInfoResponse, global::Server.Protocol.LdpMouseInfoResponse.Builder>(internal__static_Server_Protocol_LdpMouseInfoResponse__Descriptor,
                new string[] { "Type", "X", "Y", });
        internal__static_Server_Protocol_LdpPacket__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Server_Protocol_LdpPacket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpPacket, global::Server.Protocol.LdpPacket.Builder>(internal__static_Server_Protocol_LdpPacket__Descriptor,
                new string[] { "Type", "AuthRequest", "AuthResponse", "ClientInfoRequest", "PreparableInfoRequest", "PreparableDesktopResponse", "ScreenRequest", "ScreenResponse", "DisconnectRequest", "MouseInfoResponse", "KeyboardInfoResponse", "PreparableVolumeInfoResponse", "VolumeInfoResponse", });
        internal__static_Server_Protocol_LdpPreparableInfoRequest__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Server_Protocol_LdpPreparableInfoRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpPreparableInfoRequest, global::Server.Protocol.LdpPreparableInfoRequest.Builder>(internal__static_Server_Protocol_LdpPreparableInfoRequest__Descriptor,
                new string[] { "Type", });
        internal__static_Server_Protocol_LdpPreparableDesktopInfoResponse__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Server_Protocol_LdpPreparableDesktopInfoResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpPreparableDesktopInfoResponse, global::Server.Protocol.LdpPreparableDesktopInfoResponse.Builder>(internal__static_Server_Protocol_LdpPreparableDesktopInfoResponse__Descriptor,
                new string[] { "ScreenWidth", "ScreenHeight", });
        internal__static_Server_Protocol_LdpRectangle__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Server_Protocol_LdpRectangle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpRectangle, global::Server.Protocol.LdpRectangle.Builder>(internal__static_Server_Protocol_LdpRectangle__Descriptor,
                new string[] { "Left", "Top", "Right", "Bottom", });
        internal__static_Server_Protocol_LdpScreenRequest__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Server_Protocol_LdpScreenRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpScreenRequest, global::Server.Protocol.LdpScreenRequest.Builder>(internal__static_Server_Protocol_LdpScreenRequest__Descriptor,
                new string[] { });
        internal__static_Server_Protocol_LdpScreenResponse__Descriptor = Descriptor.MessageTypes[11];
        internal__static_Server_Protocol_LdpScreenResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpScreenResponse, global::Server.Protocol.LdpScreenResponse.Builder>(internal__static_Server_Protocol_LdpScreenResponse__Descriptor,
                new string[] { "CompressedScreen", "BaseLenght", "Rect", });
        internal__static_Server_Protocol_LdpPreparableVolumeInfoResponse__Descriptor = Descriptor.MessageTypes[12];
        internal__static_Server_Protocol_LdpPreparableVolumeInfoResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpPreparableVolumeInfoResponse, global::Server.Protocol.LdpPreparableVolumeInfoResponse.Builder>(internal__static_Server_Protocol_LdpPreparableVolumeInfoResponse__Descriptor,
                new string[] { "Volume", "IsMute", });
        internal__static_Server_Protocol_LdpVolumeInfoResponse__Descriptor = Descriptor.MessageTypes[13];
        internal__static_Server_Protocol_LdpVolumeInfoResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Server.Protocol.LdpVolumeInfoResponse, global::Server.Protocol.LdpVolumeInfoResponse.Builder>(internal__static_Server_Protocol_LdpVolumeInfoResponse__Descriptor,
                new string[] { "Type", "Volume", "IsMute", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum VolumeInfoType {
    VOLUME = 1,
    MUTE = 2,
  }
  
  public enum ConnectionType {
    REMOTE_DESKTOP_CONTROL = 1,
    REMOTE_VOLUME_CONTROL = 2,
  }
  
  public enum DisconnectionType {
    FROM_SERVER = 1,
    FROM_SCREEN_THREAD = 2,
    FROM_VOLUME_THREAD = 3,
  }
  
  public enum MouseType {
    LEFT_CLICK = 1,
    RIGHT_CLICK = 2,
    LEFT_DOUBLE_CLICK = 3,
    SET_CURSOR_POS = 4,
  }
  
  public enum PacketType {
    AUTH_REQUEST = 1,
    AUTH_RESPONSE = 2,
    CLIENT_INFO_REQUEST = 3,
    PREPARABLE_INFO_REQUEST = 4,
    PREPARABLE_DESKTOP_INFO_RESPONSE = 5,
    SCREEN_REQUEST = 6,
    SCREEN_RESPONSE = 7,
    PREPARABLE_VOLUME_INFO_RESPONSE = 8,
    VOLUME_INFO_RESPONSE = 9,
    MOUSE_INFO_RESPONSE = 10,
    KEYBOARD_INFO_RESPONSE = 11,
    DISCONNECT_REQUEST = 12,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpAuthRequest : pb::GeneratedMessage<LdpAuthRequest, LdpAuthRequest.Builder> {
    private LdpAuthRequest() { }
    private static readonly LdpAuthRequest defaultInstance = new LdpAuthRequest().MakeReadOnly();
    private static readonly string[] _ldpAuthRequestFieldNames = new string[] { "Password" };
    private static readonly uint[] _ldpAuthRequestFieldTags = new uint[] { 10 };
    public static LdpAuthRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpAuthRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpAuthRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpAuthRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpAuthRequest, LdpAuthRequest.Builder> InternalFieldAccessors {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpAuthRequest__FieldAccessorTable; }
    }
    
    public const int PasswordFieldNumber = 1;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpAuthRequestFieldNames;
      if (hasPassword) {
        output.WriteString(1, field_names[0], Password);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Password);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpAuthRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpAuthRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpAuthRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpAuthRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpAuthRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpAuthRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpAuthRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpAuthRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpAuthRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpAuthRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpAuthRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpAuthRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpAuthRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpAuthRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpAuthRequest result;
      
      private LdpAuthRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpAuthRequest original = result;
          result = new LdpAuthRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpAuthRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.Protocol.LdpAuthRequest.Descriptor; }
      }
      
      public override LdpAuthRequest DefaultInstanceForType {
        get { return global::Server.Protocol.LdpAuthRequest.DefaultInstance; }
      }
      
      public override LdpAuthRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpAuthRequest) {
          return MergeFrom((LdpAuthRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpAuthRequest other) {
        if (other == global::Server.Protocol.LdpAuthRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPassword) {
          Password = other.Password;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpAuthRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpAuthRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
    }
    static LdpAuthRequest() {
      object.ReferenceEquals(global::Server.Protocol.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpAuthResponse : pb::GeneratedMessage<LdpAuthResponse, LdpAuthResponse.Builder> {
    private LdpAuthResponse() { }
    private static readonly LdpAuthResponse defaultInstance = new LdpAuthResponse().MakeReadOnly();
    private static readonly string[] _ldpAuthResponseFieldNames = new string[] { "isSuccess" };
    private static readonly uint[] _ldpAuthResponseFieldTags = new uint[] { 8 };
    public static LdpAuthResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpAuthResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpAuthResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpAuthResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpAuthResponse, LdpAuthResponse.Builder> InternalFieldAccessors {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpAuthResponse__FieldAccessorTable; }
    }
    
    public const int IsSuccessFieldNumber = 1;
    private bool hasIsSuccess;
    private bool isSuccess_;
    public bool HasIsSuccess {
      get { return hasIsSuccess; }
    }
    public bool IsSuccess {
      get { return isSuccess_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIsSuccess) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpAuthResponseFieldNames;
      if (hasIsSuccess) {
        output.WriteBool(1, field_names[0], IsSuccess);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIsSuccess) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, IsSuccess);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpAuthResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpAuthResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpAuthResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpAuthResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpAuthResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpAuthResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpAuthResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpAuthResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpAuthResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpAuthResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpAuthResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpAuthResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpAuthResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpAuthResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpAuthResponse result;
      
      private LdpAuthResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpAuthResponse original = result;
          result = new LdpAuthResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpAuthResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.Protocol.LdpAuthResponse.Descriptor; }
      }
      
      public override LdpAuthResponse DefaultInstanceForType {
        get { return global::Server.Protocol.LdpAuthResponse.DefaultInstance; }
      }
      
      public override LdpAuthResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpAuthResponse) {
          return MergeFrom((LdpAuthResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpAuthResponse other) {
        if (other == global::Server.Protocol.LdpAuthResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsSuccess) {
          IsSuccess = other.IsSuccess;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpAuthResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpAuthResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsSuccess = input.ReadBool(ref result.isSuccess_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIsSuccess {
        get { return result.hasIsSuccess; }
      }
      public bool IsSuccess {
        get { return result.IsSuccess; }
        set { SetIsSuccess(value); }
      }
      public Builder SetIsSuccess(bool value) {
        PrepareBuilder();
        result.hasIsSuccess = true;
        result.isSuccess_ = value;
        return this;
      }
      public Builder ClearIsSuccess() {
        PrepareBuilder();
        result.hasIsSuccess = false;
        result.isSuccess_ = false;
        return this;
      }
    }
    static LdpAuthResponse() {
      object.ReferenceEquals(global::Server.Protocol.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpClientInfoRequest : pb::GeneratedMessage<LdpClientInfoRequest, LdpClientInfoRequest.Builder> {
    private LdpClientInfoRequest() { }
    private static readonly LdpClientInfoRequest defaultInstance = new LdpClientInfoRequest().MakeReadOnly();
    private static readonly string[] _ldpClientInfoRequestFieldNames = new string[] { "DeviceName", "IP", "OS" };
    private static readonly uint[] _ldpClientInfoRequestFieldTags = new uint[] { 26, 10, 18 };
    public static LdpClientInfoRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpClientInfoRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpClientInfoRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpClientInfoRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpClientInfoRequest, LdpClientInfoRequest.Builder> InternalFieldAccessors {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpClientInfoRequest__FieldAccessorTable; }
    }
    
    public const int IPFieldNumber = 1;
    private bool hasIP;
    private string iP_ = "";
    public bool HasIP {
      get { return hasIP; }
    }
    public string IP {
      get { return iP_; }
    }
    
    public const int OSFieldNumber = 2;
    private bool hasOS;
    private string oS_ = "";
    public bool HasOS {
      get { return hasOS; }
    }
    public string OS {
      get { return oS_; }
    }
    
    public const int DeviceNameFieldNumber = 3;
    private bool hasDeviceName;
    private string deviceName_ = "";
    public bool HasDeviceName {
      get { return hasDeviceName; }
    }
    public string DeviceName {
      get { return deviceName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIP) return false;
        if (!hasOS) return false;
        if (!hasDeviceName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpClientInfoRequestFieldNames;
      if (hasIP) {
        output.WriteString(1, field_names[1], IP);
      }
      if (hasOS) {
        output.WriteString(2, field_names[2], OS);
      }
      if (hasDeviceName) {
        output.WriteString(3, field_names[0], DeviceName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIP) {
          size += pb::CodedOutputStream.ComputeStringSize(1, IP);
        }
        if (hasOS) {
          size += pb::CodedOutputStream.ComputeStringSize(2, OS);
        }
        if (hasDeviceName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, DeviceName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpClientInfoRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpClientInfoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpClientInfoRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpClientInfoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpClientInfoRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpClientInfoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpClientInfoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpClientInfoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpClientInfoRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpClientInfoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpClientInfoRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpClientInfoRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpClientInfoRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpClientInfoRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpClientInfoRequest result;
      
      private LdpClientInfoRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpClientInfoRequest original = result;
          result = new LdpClientInfoRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpClientInfoRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.Protocol.LdpClientInfoRequest.Descriptor; }
      }
      
      public override LdpClientInfoRequest DefaultInstanceForType {
        get { return global::Server.Protocol.LdpClientInfoRequest.DefaultInstance; }
      }
      
      public override LdpClientInfoRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpClientInfoRequest) {
          return MergeFrom((LdpClientInfoRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpClientInfoRequest other) {
        if (other == global::Server.Protocol.LdpClientInfoRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIP) {
          IP = other.IP;
        }
        if (other.HasOS) {
          OS = other.OS;
        }
        if (other.HasDeviceName) {
          DeviceName = other.DeviceName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpClientInfoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpClientInfoRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasIP = input.ReadString(ref result.iP_);
              break;
            }
            case 18: {
              result.hasOS = input.ReadString(ref result.oS_);
              break;
            }
            case 26: {
              result.hasDeviceName = input.ReadString(ref result.deviceName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIP {
        get { return result.hasIP; }
      }
      public string IP {
        get { return result.IP; }
        set { SetIP(value); }
      }
      public Builder SetIP(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIP = true;
        result.iP_ = value;
        return this;
      }
      public Builder ClearIP() {
        PrepareBuilder();
        result.hasIP = false;
        result.iP_ = "";
        return this;
      }
      
      public bool HasOS {
        get { return result.hasOS; }
      }
      public string OS {
        get { return result.OS; }
        set { SetOS(value); }
      }
      public Builder SetOS(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOS = true;
        result.oS_ = value;
        return this;
      }
      public Builder ClearOS() {
        PrepareBuilder();
        result.hasOS = false;
        result.oS_ = "";
        return this;
      }
      
      public bool HasDeviceName {
        get { return result.hasDeviceName; }
      }
      public string DeviceName {
        get { return result.DeviceName; }
        set { SetDeviceName(value); }
      }
      public Builder SetDeviceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceName = true;
        result.deviceName_ = value;
        return this;
      }
      public Builder ClearDeviceName() {
        PrepareBuilder();
        result.hasDeviceName = false;
        result.deviceName_ = "";
        return this;
      }
    }
    static LdpClientInfoRequest() {
      object.ReferenceEquals(global::Server.Protocol.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpDisconnectRequest : pb::GeneratedMessage<LdpDisconnectRequest, LdpDisconnectRequest.Builder> {
    private LdpDisconnectRequest() { }
    private static readonly LdpDisconnectRequest defaultInstance = new LdpDisconnectRequest().MakeReadOnly();
    private static readonly string[] _ldpDisconnectRequestFieldNames = new string[] { "Type" };
    private static readonly uint[] _ldpDisconnectRequestFieldTags = new uint[] { 8 };
    public static LdpDisconnectRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpDisconnectRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpDisconnectRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpDisconnectRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpDisconnectRequest, LdpDisconnectRequest.Builder> InternalFieldAccessors {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpDisconnectRequest__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::Server.Protocol.DisconnectionType type_ = global::Server.Protocol.DisconnectionType.FROM_SERVER;
    public bool HasType {
      get { return hasType; }
    }
    public global::Server.Protocol.DisconnectionType Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpDisconnectRequestFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[0], (int) Type, Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpDisconnectRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpDisconnectRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpDisconnectRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpDisconnectRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpDisconnectRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpDisconnectRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpDisconnectRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpDisconnectRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpDisconnectRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpDisconnectRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpDisconnectRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpDisconnectRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpDisconnectRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpDisconnectRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpDisconnectRequest result;
      
      private LdpDisconnectRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpDisconnectRequest original = result;
          result = new LdpDisconnectRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpDisconnectRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.Protocol.LdpDisconnectRequest.Descriptor; }
      }
      
      public override LdpDisconnectRequest DefaultInstanceForType {
        get { return global::Server.Protocol.LdpDisconnectRequest.DefaultInstance; }
      }
      
      public override LdpDisconnectRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpDisconnectRequest) {
          return MergeFrom((LdpDisconnectRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpDisconnectRequest other) {
        if (other == global::Server.Protocol.LdpDisconnectRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpDisconnectRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpDisconnectRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Server.Protocol.DisconnectionType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Server.Protocol.DisconnectionType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Server.Protocol.DisconnectionType.FROM_SERVER;
        return this;
      }
    }
    static LdpDisconnectRequest() {
      object.ReferenceEquals(global::Server.Protocol.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpKeyboardInfoResponse : pb::GeneratedMessage<LdpKeyboardInfoResponse, LdpKeyboardInfoResponse.Builder> {
    private LdpKeyboardInfoResponse() { }
    private static readonly LdpKeyboardInfoResponse defaultInstance = new LdpKeyboardInfoResponse().MakeReadOnly();
    private static readonly string[] _ldpKeyboardInfoResponseFieldNames = new string[] { "Key" };
    private static readonly uint[] _ldpKeyboardInfoResponseFieldTags = new uint[] { 10 };
    public static LdpKeyboardInfoResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpKeyboardInfoResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpKeyboardInfoResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpKeyboardInfoResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpKeyboardInfoResponse, LdpKeyboardInfoResponse.Builder> InternalFieldAccessors {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpKeyboardInfoResponse__FieldAccessorTable; }
    }
    
    public const int KeyFieldNumber = 1;
    private bool hasKey;
    private string key_ = "";
    public bool HasKey {
      get { return hasKey; }
    }
    public string Key {
      get { return key_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpKeyboardInfoResponseFieldNames;
      if (hasKey) {
        output.WriteString(1, field_names[0], Key);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasKey) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Key);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpKeyboardInfoResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpKeyboardInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpKeyboardInfoResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpKeyboardInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpKeyboardInfoResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpKeyboardInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpKeyboardInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpKeyboardInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpKeyboardInfoResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpKeyboardInfoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpKeyboardInfoResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpKeyboardInfoResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpKeyboardInfoResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpKeyboardInfoResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpKeyboardInfoResponse result;
      
      private LdpKeyboardInfoResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpKeyboardInfoResponse original = result;
          result = new LdpKeyboardInfoResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpKeyboardInfoResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.Protocol.LdpKeyboardInfoResponse.Descriptor; }
      }
      
      public override LdpKeyboardInfoResponse DefaultInstanceForType {
        get { return global::Server.Protocol.LdpKeyboardInfoResponse.DefaultInstance; }
      }
      
      public override LdpKeyboardInfoResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpKeyboardInfoResponse) {
          return MergeFrom((LdpKeyboardInfoResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpKeyboardInfoResponse other) {
        if (other == global::Server.Protocol.LdpKeyboardInfoResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKey) {
          Key = other.Key;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpKeyboardInfoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpKeyboardInfoResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasKey = input.ReadString(ref result.key_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public string Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = "";
        return this;
      }
    }
    static LdpKeyboardInfoResponse() {
      object.ReferenceEquals(global::Server.Protocol.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpMouseInfoResponse : pb::GeneratedMessage<LdpMouseInfoResponse, LdpMouseInfoResponse.Builder> {
    private LdpMouseInfoResponse() { }
    private static readonly LdpMouseInfoResponse defaultInstance = new LdpMouseInfoResponse().MakeReadOnly();
    private static readonly string[] _ldpMouseInfoResponseFieldNames = new string[] { "Type", "X", "Y" };
    private static readonly uint[] _ldpMouseInfoResponseFieldTags = new uint[] { 8, 16, 24 };
    public static LdpMouseInfoResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpMouseInfoResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpMouseInfoResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpMouseInfoResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpMouseInfoResponse, LdpMouseInfoResponse.Builder> InternalFieldAccessors {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpMouseInfoResponse__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::Server.Protocol.MouseType type_ = global::Server.Protocol.MouseType.LEFT_CLICK;
    public bool HasType {
      get { return hasType; }
    }
    public global::Server.Protocol.MouseType Type {
      get { return type_; }
    }
    
    public const int XFieldNumber = 2;
    private bool hasX;
    private int x_;
    public bool HasX {
      get { return hasX; }
    }
    public int X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 3;
    private bool hasY;
    private int y_;
    public bool HasY {
      get { return hasY; }
    }
    public int Y {
      get { return y_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpMouseInfoResponseFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[0], (int) Type, Type);
      }
      if (hasX) {
        output.WriteInt32(2, field_names[1], X);
      }
      if (hasY) {
        output.WriteInt32(3, field_names[2], Y);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasX) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Y);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpMouseInfoResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpMouseInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpMouseInfoResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpMouseInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpMouseInfoResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpMouseInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpMouseInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpMouseInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpMouseInfoResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpMouseInfoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpMouseInfoResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpMouseInfoResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpMouseInfoResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpMouseInfoResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpMouseInfoResponse result;
      
      private LdpMouseInfoResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpMouseInfoResponse original = result;
          result = new LdpMouseInfoResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpMouseInfoResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.Protocol.LdpMouseInfoResponse.Descriptor; }
      }
      
      public override LdpMouseInfoResponse DefaultInstanceForType {
        get { return global::Server.Protocol.LdpMouseInfoResponse.DefaultInstance; }
      }
      
      public override LdpMouseInfoResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpMouseInfoResponse) {
          return MergeFrom((LdpMouseInfoResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpMouseInfoResponse other) {
        if (other == global::Server.Protocol.LdpMouseInfoResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpMouseInfoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpMouseInfoResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasX = input.ReadInt32(ref result.x_);
              break;
            }
            case 24: {
              result.hasY = input.ReadInt32(ref result.y_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Server.Protocol.MouseType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Server.Protocol.MouseType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Server.Protocol.MouseType.LEFT_CLICK;
        return this;
      }
      
      public bool HasX {
        get { return result.hasX; }
      }
      public int X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(int value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public int Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(int value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
    }
    static LdpMouseInfoResponse() {
      object.ReferenceEquals(global::Server.Protocol.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpPacket : pb::GeneratedMessage<LdpPacket, LdpPacket.Builder> {
    private LdpPacket() { }
    private static readonly LdpPacket defaultInstance = new LdpPacket().MakeReadOnly();
    private static readonly string[] _ldpPacketFieldNames = new string[] { "AuthRequest", "AuthResponse", "ClientInfoRequest", "DisconnectRequest", "KeyboardInfoResponse", "MouseInfoResponse", "PreparableDesktopResponse", "PreparableInfoRequest", "PreparableVolumeInfoResponse", "ScreenRequest", "ScreenResponse", "Type", "VolumeInfoResponse" };
    private static readonly uint[] _ldpPacketFieldTags = new uint[] { 18, 26, 34, 74, 90, 82, 50, 42, 98, 58, 66, 8, 106 };
    public static LdpPacket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpPacket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpPacket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpPacket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpPacket, LdpPacket.Builder> InternalFieldAccessors {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpPacket__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::Server.Protocol.PacketType type_ = global::Server.Protocol.PacketType.AUTH_REQUEST;
    public bool HasType {
      get { return hasType; }
    }
    public global::Server.Protocol.PacketType Type {
      get { return type_; }
    }
    
    public const int AuthRequestFieldNumber = 2;
    private bool hasAuthRequest;
    private global::Server.Protocol.LdpAuthRequest authRequest_;
    public bool HasAuthRequest {
      get { return hasAuthRequest; }
    }
    public global::Server.Protocol.LdpAuthRequest AuthRequest {
      get { return authRequest_ ?? global::Server.Protocol.LdpAuthRequest.DefaultInstance; }
    }
    
    public const int AuthResponseFieldNumber = 3;
    private bool hasAuthResponse;
    private global::Server.Protocol.LdpAuthResponse authResponse_;
    public bool HasAuthResponse {
      get { return hasAuthResponse; }
    }
    public global::Server.Protocol.LdpAuthResponse AuthResponse {
      get { return authResponse_ ?? global::Server.Protocol.LdpAuthResponse.DefaultInstance; }
    }
    
    public const int ClientInfoRequestFieldNumber = 4;
    private bool hasClientInfoRequest;
    private global::Server.Protocol.LdpClientInfoRequest clientInfoRequest_;
    public bool HasClientInfoRequest {
      get { return hasClientInfoRequest; }
    }
    public global::Server.Protocol.LdpClientInfoRequest ClientInfoRequest {
      get { return clientInfoRequest_ ?? global::Server.Protocol.LdpClientInfoRequest.DefaultInstance; }
    }
    
    public const int PreparableInfoRequestFieldNumber = 5;
    private bool hasPreparableInfoRequest;
    private global::Server.Protocol.LdpPreparableInfoRequest preparableInfoRequest_;
    public bool HasPreparableInfoRequest {
      get { return hasPreparableInfoRequest; }
    }
    public global::Server.Protocol.LdpPreparableInfoRequest PreparableInfoRequest {
      get { return preparableInfoRequest_ ?? global::Server.Protocol.LdpPreparableInfoRequest.DefaultInstance; }
    }
    
    public const int PreparableDesktopResponseFieldNumber = 6;
    private bool hasPreparableDesktopResponse;
    private global::Server.Protocol.LdpPreparableDesktopInfoResponse preparableDesktopResponse_;
    public bool HasPreparableDesktopResponse {
      get { return hasPreparableDesktopResponse; }
    }
    public global::Server.Protocol.LdpPreparableDesktopInfoResponse PreparableDesktopResponse {
      get { return preparableDesktopResponse_ ?? global::Server.Protocol.LdpPreparableDesktopInfoResponse.DefaultInstance; }
    }
    
    public const int ScreenRequestFieldNumber = 7;
    private bool hasScreenRequest;
    private global::Server.Protocol.LdpScreenRequest screenRequest_;
    public bool HasScreenRequest {
      get { return hasScreenRequest; }
    }
    public global::Server.Protocol.LdpScreenRequest ScreenRequest {
      get { return screenRequest_ ?? global::Server.Protocol.LdpScreenRequest.DefaultInstance; }
    }
    
    public const int ScreenResponseFieldNumber = 8;
    private bool hasScreenResponse;
    private global::Server.Protocol.LdpScreenResponse screenResponse_;
    public bool HasScreenResponse {
      get { return hasScreenResponse; }
    }
    public global::Server.Protocol.LdpScreenResponse ScreenResponse {
      get { return screenResponse_ ?? global::Server.Protocol.LdpScreenResponse.DefaultInstance; }
    }
    
    public const int DisconnectRequestFieldNumber = 9;
    private bool hasDisconnectRequest;
    private global::Server.Protocol.LdpDisconnectRequest disconnectRequest_;
    public bool HasDisconnectRequest {
      get { return hasDisconnectRequest; }
    }
    public global::Server.Protocol.LdpDisconnectRequest DisconnectRequest {
      get { return disconnectRequest_ ?? global::Server.Protocol.LdpDisconnectRequest.DefaultInstance; }
    }
    
    public const int MouseInfoResponseFieldNumber = 10;
    private bool hasMouseInfoResponse;
    private global::Server.Protocol.LdpMouseInfoResponse mouseInfoResponse_;
    public bool HasMouseInfoResponse {
      get { return hasMouseInfoResponse; }
    }
    public global::Server.Protocol.LdpMouseInfoResponse MouseInfoResponse {
      get { return mouseInfoResponse_ ?? global::Server.Protocol.LdpMouseInfoResponse.DefaultInstance; }
    }
    
    public const int KeyboardInfoResponseFieldNumber = 11;
    private bool hasKeyboardInfoResponse;
    private global::Server.Protocol.LdpKeyboardInfoResponse keyboardInfoResponse_;
    public bool HasKeyboardInfoResponse {
      get { return hasKeyboardInfoResponse; }
    }
    public global::Server.Protocol.LdpKeyboardInfoResponse KeyboardInfoResponse {
      get { return keyboardInfoResponse_ ?? global::Server.Protocol.LdpKeyboardInfoResponse.DefaultInstance; }
    }
    
    public const int PreparableVolumeInfoResponseFieldNumber = 12;
    private bool hasPreparableVolumeInfoResponse;
    private global::Server.Protocol.LdpPreparableVolumeInfoResponse preparableVolumeInfoResponse_;
    public bool HasPreparableVolumeInfoResponse {
      get { return hasPreparableVolumeInfoResponse; }
    }
    public global::Server.Protocol.LdpPreparableVolumeInfoResponse PreparableVolumeInfoResponse {
      get { return preparableVolumeInfoResponse_ ?? global::Server.Protocol.LdpPreparableVolumeInfoResponse.DefaultInstance; }
    }
    
    public const int VolumeInfoResponseFieldNumber = 13;
    private bool hasVolumeInfoResponse;
    private global::Server.Protocol.LdpVolumeInfoResponse volumeInfoResponse_;
    public bool HasVolumeInfoResponse {
      get { return hasVolumeInfoResponse; }
    }
    public global::Server.Protocol.LdpVolumeInfoResponse VolumeInfoResponse {
      get { return volumeInfoResponse_ ?? global::Server.Protocol.LdpVolumeInfoResponse.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (HasAuthResponse) {
          if (!AuthResponse.IsInitialized) return false;
        }
        if (HasClientInfoRequest) {
          if (!ClientInfoRequest.IsInitialized) return false;
        }
        if (HasPreparableInfoRequest) {
          if (!PreparableInfoRequest.IsInitialized) return false;
        }
        if (HasScreenResponse) {
          if (!ScreenResponse.IsInitialized) return false;
        }
        if (HasDisconnectRequest) {
          if (!DisconnectRequest.IsInitialized) return false;
        }
        if (HasMouseInfoResponse) {
          if (!MouseInfoResponse.IsInitialized) return false;
        }
        if (HasVolumeInfoResponse) {
          if (!VolumeInfoResponse.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpPacketFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[11], (int) Type, Type);
      }
      if (hasAuthRequest) {
        output.WriteMessage(2, field_names[0], AuthRequest);
      }
      if (hasAuthResponse) {
        output.WriteMessage(3, field_names[1], AuthResponse);
      }
      if (hasClientInfoRequest) {
        output.WriteMessage(4, field_names[2], ClientInfoRequest);
      }
      if (hasPreparableInfoRequest) {
        output.WriteMessage(5, field_names[7], PreparableInfoRequest);
      }
      if (hasPreparableDesktopResponse) {
        output.WriteMessage(6, field_names[6], PreparableDesktopResponse);
      }
      if (hasScreenRequest) {
        output.WriteMessage(7, field_names[9], ScreenRequest);
      }
      if (hasScreenResponse) {
        output.WriteMessage(8, field_names[10], ScreenResponse);
      }
      if (hasDisconnectRequest) {
        output.WriteMessage(9, field_names[3], DisconnectRequest);
      }
      if (hasMouseInfoResponse) {
        output.WriteMessage(10, field_names[5], MouseInfoResponse);
      }
      if (hasKeyboardInfoResponse) {
        output.WriteMessage(11, field_names[4], KeyboardInfoResponse);
      }
      if (hasPreparableVolumeInfoResponse) {
        output.WriteMessage(12, field_names[8], PreparableVolumeInfoResponse);
      }
      if (hasVolumeInfoResponse) {
        output.WriteMessage(13, field_names[12], VolumeInfoResponse);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasAuthRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, AuthRequest);
        }
        if (hasAuthResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, AuthResponse);
        }
        if (hasClientInfoRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, ClientInfoRequest);
        }
        if (hasPreparableInfoRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, PreparableInfoRequest);
        }
        if (hasPreparableDesktopResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, PreparableDesktopResponse);
        }
        if (hasScreenRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, ScreenRequest);
        }
        if (hasScreenResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, ScreenResponse);
        }
        if (hasDisconnectRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, DisconnectRequest);
        }
        if (hasMouseInfoResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, MouseInfoResponse);
        }
        if (hasKeyboardInfoResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, KeyboardInfoResponse);
        }
        if (hasPreparableVolumeInfoResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, PreparableVolumeInfoResponse);
        }
        if (hasVolumeInfoResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, VolumeInfoResponse);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpPacket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpPacket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpPacket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpPacket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpPacket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpPacket MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpPacket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpPacket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpPacket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpPacket result;
      
      private LdpPacket PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpPacket original = result;
          result = new LdpPacket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpPacket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.Protocol.LdpPacket.Descriptor; }
      }
      
      public override LdpPacket DefaultInstanceForType {
        get { return global::Server.Protocol.LdpPacket.DefaultInstance; }
      }
      
      public override LdpPacket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpPacket) {
          return MergeFrom((LdpPacket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpPacket other) {
        if (other == global::Server.Protocol.LdpPacket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasAuthRequest) {
          MergeAuthRequest(other.AuthRequest);
        }
        if (other.HasAuthResponse) {
          MergeAuthResponse(other.AuthResponse);
        }
        if (other.HasClientInfoRequest) {
          MergeClientInfoRequest(other.ClientInfoRequest);
        }
        if (other.HasPreparableInfoRequest) {
          MergePreparableInfoRequest(other.PreparableInfoRequest);
        }
        if (other.HasPreparableDesktopResponse) {
          MergePreparableDesktopResponse(other.PreparableDesktopResponse);
        }
        if (other.HasScreenRequest) {
          MergeScreenRequest(other.ScreenRequest);
        }
        if (other.HasScreenResponse) {
          MergeScreenResponse(other.ScreenResponse);
        }
        if (other.HasDisconnectRequest) {
          MergeDisconnectRequest(other.DisconnectRequest);
        }
        if (other.HasMouseInfoResponse) {
          MergeMouseInfoResponse(other.MouseInfoResponse);
        }
        if (other.HasKeyboardInfoResponse) {
          MergeKeyboardInfoResponse(other.KeyboardInfoResponse);
        }
        if (other.HasPreparableVolumeInfoResponse) {
          MergePreparableVolumeInfoResponse(other.PreparableVolumeInfoResponse);
        }
        if (other.HasVolumeInfoResponse) {
          MergeVolumeInfoResponse(other.VolumeInfoResponse);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpPacketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::Server.Protocol.LdpAuthRequest.Builder subBuilder = global::Server.Protocol.LdpAuthRequest.CreateBuilder();
              if (result.hasAuthRequest) {
                subBuilder.MergeFrom(AuthRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AuthRequest = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Server.Protocol.LdpAuthResponse.Builder subBuilder = global::Server.Protocol.LdpAuthResponse.CreateBuilder();
              if (result.hasAuthResponse) {
                subBuilder.MergeFrom(AuthResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AuthResponse = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Server.Protocol.LdpClientInfoRequest.Builder subBuilder = global::Server.Protocol.LdpClientInfoRequest.CreateBuilder();
              if (result.hasClientInfoRequest) {
                subBuilder.MergeFrom(ClientInfoRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClientInfoRequest = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::Server.Protocol.LdpPreparableInfoRequest.Builder subBuilder = global::Server.Protocol.LdpPreparableInfoRequest.CreateBuilder();
              if (result.hasPreparableInfoRequest) {
                subBuilder.MergeFrom(PreparableInfoRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PreparableInfoRequest = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::Server.Protocol.LdpPreparableDesktopInfoResponse.Builder subBuilder = global::Server.Protocol.LdpPreparableDesktopInfoResponse.CreateBuilder();
              if (result.hasPreparableDesktopResponse) {
                subBuilder.MergeFrom(PreparableDesktopResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PreparableDesktopResponse = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::Server.Protocol.LdpScreenRequest.Builder subBuilder = global::Server.Protocol.LdpScreenRequest.CreateBuilder();
              if (result.hasScreenRequest) {
                subBuilder.MergeFrom(ScreenRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ScreenRequest = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::Server.Protocol.LdpScreenResponse.Builder subBuilder = global::Server.Protocol.LdpScreenResponse.CreateBuilder();
              if (result.hasScreenResponse) {
                subBuilder.MergeFrom(ScreenResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ScreenResponse = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::Server.Protocol.LdpDisconnectRequest.Builder subBuilder = global::Server.Protocol.LdpDisconnectRequest.CreateBuilder();
              if (result.hasDisconnectRequest) {
                subBuilder.MergeFrom(DisconnectRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DisconnectRequest = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::Server.Protocol.LdpMouseInfoResponse.Builder subBuilder = global::Server.Protocol.LdpMouseInfoResponse.CreateBuilder();
              if (result.hasMouseInfoResponse) {
                subBuilder.MergeFrom(MouseInfoResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MouseInfoResponse = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::Server.Protocol.LdpKeyboardInfoResponse.Builder subBuilder = global::Server.Protocol.LdpKeyboardInfoResponse.CreateBuilder();
              if (result.hasKeyboardInfoResponse) {
                subBuilder.MergeFrom(KeyboardInfoResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              KeyboardInfoResponse = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::Server.Protocol.LdpPreparableVolumeInfoResponse.Builder subBuilder = global::Server.Protocol.LdpPreparableVolumeInfoResponse.CreateBuilder();
              if (result.hasPreparableVolumeInfoResponse) {
                subBuilder.MergeFrom(PreparableVolumeInfoResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PreparableVolumeInfoResponse = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::Server.Protocol.LdpVolumeInfoResponse.Builder subBuilder = global::Server.Protocol.LdpVolumeInfoResponse.CreateBuilder();
              if (result.hasVolumeInfoResponse) {
                subBuilder.MergeFrom(VolumeInfoResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              VolumeInfoResponse = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Server.Protocol.PacketType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Server.Protocol.PacketType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Server.Protocol.PacketType.AUTH_REQUEST;
        return this;
      }
      
      public bool HasAuthRequest {
       get { return result.hasAuthRequest; }
      }
      public global::Server.Protocol.LdpAuthRequest AuthRequest {
        get { return result.AuthRequest; }
        set { SetAuthRequest(value); }
      }
      public Builder SetAuthRequest(global::Server.Protocol.LdpAuthRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthRequest = true;
        result.authRequest_ = value;
        return this;
      }
      public Builder SetAuthRequest(global::Server.Protocol.LdpAuthRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAuthRequest = true;
        result.authRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAuthRequest(global::Server.Protocol.LdpAuthRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAuthRequest &&
            result.authRequest_ != global::Server.Protocol.LdpAuthRequest.DefaultInstance) {
            result.authRequest_ = global::Server.Protocol.LdpAuthRequest.CreateBuilder(result.authRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.authRequest_ = value;
        }
        result.hasAuthRequest = true;
        return this;
      }
      public Builder ClearAuthRequest() {
        PrepareBuilder();
        result.hasAuthRequest = false;
        result.authRequest_ = null;
        return this;
      }
      
      public bool HasAuthResponse {
       get { return result.hasAuthResponse; }
      }
      public global::Server.Protocol.LdpAuthResponse AuthResponse {
        get { return result.AuthResponse; }
        set { SetAuthResponse(value); }
      }
      public Builder SetAuthResponse(global::Server.Protocol.LdpAuthResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthResponse = true;
        result.authResponse_ = value;
        return this;
      }
      public Builder SetAuthResponse(global::Server.Protocol.LdpAuthResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAuthResponse = true;
        result.authResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAuthResponse(global::Server.Protocol.LdpAuthResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAuthResponse &&
            result.authResponse_ != global::Server.Protocol.LdpAuthResponse.DefaultInstance) {
            result.authResponse_ = global::Server.Protocol.LdpAuthResponse.CreateBuilder(result.authResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.authResponse_ = value;
        }
        result.hasAuthResponse = true;
        return this;
      }
      public Builder ClearAuthResponse() {
        PrepareBuilder();
        result.hasAuthResponse = false;
        result.authResponse_ = null;
        return this;
      }
      
      public bool HasClientInfoRequest {
       get { return result.hasClientInfoRequest; }
      }
      public global::Server.Protocol.LdpClientInfoRequest ClientInfoRequest {
        get { return result.ClientInfoRequest; }
        set { SetClientInfoRequest(value); }
      }
      public Builder SetClientInfoRequest(global::Server.Protocol.LdpClientInfoRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientInfoRequest = true;
        result.clientInfoRequest_ = value;
        return this;
      }
      public Builder SetClientInfoRequest(global::Server.Protocol.LdpClientInfoRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClientInfoRequest = true;
        result.clientInfoRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClientInfoRequest(global::Server.Protocol.LdpClientInfoRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClientInfoRequest &&
            result.clientInfoRequest_ != global::Server.Protocol.LdpClientInfoRequest.DefaultInstance) {
            result.clientInfoRequest_ = global::Server.Protocol.LdpClientInfoRequest.CreateBuilder(result.clientInfoRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.clientInfoRequest_ = value;
        }
        result.hasClientInfoRequest = true;
        return this;
      }
      public Builder ClearClientInfoRequest() {
        PrepareBuilder();
        result.hasClientInfoRequest = false;
        result.clientInfoRequest_ = null;
        return this;
      }
      
      public bool HasPreparableInfoRequest {
       get { return result.hasPreparableInfoRequest; }
      }
      public global::Server.Protocol.LdpPreparableInfoRequest PreparableInfoRequest {
        get { return result.PreparableInfoRequest; }
        set { SetPreparableInfoRequest(value); }
      }
      public Builder SetPreparableInfoRequest(global::Server.Protocol.LdpPreparableInfoRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPreparableInfoRequest = true;
        result.preparableInfoRequest_ = value;
        return this;
      }
      public Builder SetPreparableInfoRequest(global::Server.Protocol.LdpPreparableInfoRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPreparableInfoRequest = true;
        result.preparableInfoRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergePreparableInfoRequest(global::Server.Protocol.LdpPreparableInfoRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPreparableInfoRequest &&
            result.preparableInfoRequest_ != global::Server.Protocol.LdpPreparableInfoRequest.DefaultInstance) {
            result.preparableInfoRequest_ = global::Server.Protocol.LdpPreparableInfoRequest.CreateBuilder(result.preparableInfoRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.preparableInfoRequest_ = value;
        }
        result.hasPreparableInfoRequest = true;
        return this;
      }
      public Builder ClearPreparableInfoRequest() {
        PrepareBuilder();
        result.hasPreparableInfoRequest = false;
        result.preparableInfoRequest_ = null;
        return this;
      }
      
      public bool HasPreparableDesktopResponse {
       get { return result.hasPreparableDesktopResponse; }
      }
      public global::Server.Protocol.LdpPreparableDesktopInfoResponse PreparableDesktopResponse {
        get { return result.PreparableDesktopResponse; }
        set { SetPreparableDesktopResponse(value); }
      }
      public Builder SetPreparableDesktopResponse(global::Server.Protocol.LdpPreparableDesktopInfoResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPreparableDesktopResponse = true;
        result.preparableDesktopResponse_ = value;
        return this;
      }
      public Builder SetPreparableDesktopResponse(global::Server.Protocol.LdpPreparableDesktopInfoResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPreparableDesktopResponse = true;
        result.preparableDesktopResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergePreparableDesktopResponse(global::Server.Protocol.LdpPreparableDesktopInfoResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPreparableDesktopResponse &&
            result.preparableDesktopResponse_ != global::Server.Protocol.LdpPreparableDesktopInfoResponse.DefaultInstance) {
            result.preparableDesktopResponse_ = global::Server.Protocol.LdpPreparableDesktopInfoResponse.CreateBuilder(result.preparableDesktopResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.preparableDesktopResponse_ = value;
        }
        result.hasPreparableDesktopResponse = true;
        return this;
      }
      public Builder ClearPreparableDesktopResponse() {
        PrepareBuilder();
        result.hasPreparableDesktopResponse = false;
        result.preparableDesktopResponse_ = null;
        return this;
      }
      
      public bool HasScreenRequest {
       get { return result.hasScreenRequest; }
      }
      public global::Server.Protocol.LdpScreenRequest ScreenRequest {
        get { return result.ScreenRequest; }
        set { SetScreenRequest(value); }
      }
      public Builder SetScreenRequest(global::Server.Protocol.LdpScreenRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasScreenRequest = true;
        result.screenRequest_ = value;
        return this;
      }
      public Builder SetScreenRequest(global::Server.Protocol.LdpScreenRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasScreenRequest = true;
        result.screenRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeScreenRequest(global::Server.Protocol.LdpScreenRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasScreenRequest &&
            result.screenRequest_ != global::Server.Protocol.LdpScreenRequest.DefaultInstance) {
            result.screenRequest_ = global::Server.Protocol.LdpScreenRequest.CreateBuilder(result.screenRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.screenRequest_ = value;
        }
        result.hasScreenRequest = true;
        return this;
      }
      public Builder ClearScreenRequest() {
        PrepareBuilder();
        result.hasScreenRequest = false;
        result.screenRequest_ = null;
        return this;
      }
      
      public bool HasScreenResponse {
       get { return result.hasScreenResponse; }
      }
      public global::Server.Protocol.LdpScreenResponse ScreenResponse {
        get { return result.ScreenResponse; }
        set { SetScreenResponse(value); }
      }
      public Builder SetScreenResponse(global::Server.Protocol.LdpScreenResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasScreenResponse = true;
        result.screenResponse_ = value;
        return this;
      }
      public Builder SetScreenResponse(global::Server.Protocol.LdpScreenResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasScreenResponse = true;
        result.screenResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeScreenResponse(global::Server.Protocol.LdpScreenResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasScreenResponse &&
            result.screenResponse_ != global::Server.Protocol.LdpScreenResponse.DefaultInstance) {
            result.screenResponse_ = global::Server.Protocol.LdpScreenResponse.CreateBuilder(result.screenResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.screenResponse_ = value;
        }
        result.hasScreenResponse = true;
        return this;
      }
      public Builder ClearScreenResponse() {
        PrepareBuilder();
        result.hasScreenResponse = false;
        result.screenResponse_ = null;
        return this;
      }
      
      public bool HasDisconnectRequest {
       get { return result.hasDisconnectRequest; }
      }
      public global::Server.Protocol.LdpDisconnectRequest DisconnectRequest {
        get { return result.DisconnectRequest; }
        set { SetDisconnectRequest(value); }
      }
      public Builder SetDisconnectRequest(global::Server.Protocol.LdpDisconnectRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDisconnectRequest = true;
        result.disconnectRequest_ = value;
        return this;
      }
      public Builder SetDisconnectRequest(global::Server.Protocol.LdpDisconnectRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDisconnectRequest = true;
        result.disconnectRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDisconnectRequest(global::Server.Protocol.LdpDisconnectRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDisconnectRequest &&
            result.disconnectRequest_ != global::Server.Protocol.LdpDisconnectRequest.DefaultInstance) {
            result.disconnectRequest_ = global::Server.Protocol.LdpDisconnectRequest.CreateBuilder(result.disconnectRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.disconnectRequest_ = value;
        }
        result.hasDisconnectRequest = true;
        return this;
      }
      public Builder ClearDisconnectRequest() {
        PrepareBuilder();
        result.hasDisconnectRequest = false;
        result.disconnectRequest_ = null;
        return this;
      }
      
      public bool HasMouseInfoResponse {
       get { return result.hasMouseInfoResponse; }
      }
      public global::Server.Protocol.LdpMouseInfoResponse MouseInfoResponse {
        get { return result.MouseInfoResponse; }
        set { SetMouseInfoResponse(value); }
      }
      public Builder SetMouseInfoResponse(global::Server.Protocol.LdpMouseInfoResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMouseInfoResponse = true;
        result.mouseInfoResponse_ = value;
        return this;
      }
      public Builder SetMouseInfoResponse(global::Server.Protocol.LdpMouseInfoResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMouseInfoResponse = true;
        result.mouseInfoResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMouseInfoResponse(global::Server.Protocol.LdpMouseInfoResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMouseInfoResponse &&
            result.mouseInfoResponse_ != global::Server.Protocol.LdpMouseInfoResponse.DefaultInstance) {
            result.mouseInfoResponse_ = global::Server.Protocol.LdpMouseInfoResponse.CreateBuilder(result.mouseInfoResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.mouseInfoResponse_ = value;
        }
        result.hasMouseInfoResponse = true;
        return this;
      }
      public Builder ClearMouseInfoResponse() {
        PrepareBuilder();
        result.hasMouseInfoResponse = false;
        result.mouseInfoResponse_ = null;
        return this;
      }
      
      public bool HasKeyboardInfoResponse {
       get { return result.hasKeyboardInfoResponse; }
      }
      public global::Server.Protocol.LdpKeyboardInfoResponse KeyboardInfoResponse {
        get { return result.KeyboardInfoResponse; }
        set { SetKeyboardInfoResponse(value); }
      }
      public Builder SetKeyboardInfoResponse(global::Server.Protocol.LdpKeyboardInfoResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKeyboardInfoResponse = true;
        result.keyboardInfoResponse_ = value;
        return this;
      }
      public Builder SetKeyboardInfoResponse(global::Server.Protocol.LdpKeyboardInfoResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasKeyboardInfoResponse = true;
        result.keyboardInfoResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeKeyboardInfoResponse(global::Server.Protocol.LdpKeyboardInfoResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasKeyboardInfoResponse &&
            result.keyboardInfoResponse_ != global::Server.Protocol.LdpKeyboardInfoResponse.DefaultInstance) {
            result.keyboardInfoResponse_ = global::Server.Protocol.LdpKeyboardInfoResponse.CreateBuilder(result.keyboardInfoResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.keyboardInfoResponse_ = value;
        }
        result.hasKeyboardInfoResponse = true;
        return this;
      }
      public Builder ClearKeyboardInfoResponse() {
        PrepareBuilder();
        result.hasKeyboardInfoResponse = false;
        result.keyboardInfoResponse_ = null;
        return this;
      }
      
      public bool HasPreparableVolumeInfoResponse {
       get { return result.hasPreparableVolumeInfoResponse; }
      }
      public global::Server.Protocol.LdpPreparableVolumeInfoResponse PreparableVolumeInfoResponse {
        get { return result.PreparableVolumeInfoResponse; }
        set { SetPreparableVolumeInfoResponse(value); }
      }
      public Builder SetPreparableVolumeInfoResponse(global::Server.Protocol.LdpPreparableVolumeInfoResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPreparableVolumeInfoResponse = true;
        result.preparableVolumeInfoResponse_ = value;
        return this;
      }
      public Builder SetPreparableVolumeInfoResponse(global::Server.Protocol.LdpPreparableVolumeInfoResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPreparableVolumeInfoResponse = true;
        result.preparableVolumeInfoResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergePreparableVolumeInfoResponse(global::Server.Protocol.LdpPreparableVolumeInfoResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPreparableVolumeInfoResponse &&
            result.preparableVolumeInfoResponse_ != global::Server.Protocol.LdpPreparableVolumeInfoResponse.DefaultInstance) {
            result.preparableVolumeInfoResponse_ = global::Server.Protocol.LdpPreparableVolumeInfoResponse.CreateBuilder(result.preparableVolumeInfoResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.preparableVolumeInfoResponse_ = value;
        }
        result.hasPreparableVolumeInfoResponse = true;
        return this;
      }
      public Builder ClearPreparableVolumeInfoResponse() {
        PrepareBuilder();
        result.hasPreparableVolumeInfoResponse = false;
        result.preparableVolumeInfoResponse_ = null;
        return this;
      }
      
      public bool HasVolumeInfoResponse {
       get { return result.hasVolumeInfoResponse; }
      }
      public global::Server.Protocol.LdpVolumeInfoResponse VolumeInfoResponse {
        get { return result.VolumeInfoResponse; }
        set { SetVolumeInfoResponse(value); }
      }
      public Builder SetVolumeInfoResponse(global::Server.Protocol.LdpVolumeInfoResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVolumeInfoResponse = true;
        result.volumeInfoResponse_ = value;
        return this;
      }
      public Builder SetVolumeInfoResponse(global::Server.Protocol.LdpVolumeInfoResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVolumeInfoResponse = true;
        result.volumeInfoResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVolumeInfoResponse(global::Server.Protocol.LdpVolumeInfoResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVolumeInfoResponse &&
            result.volumeInfoResponse_ != global::Server.Protocol.LdpVolumeInfoResponse.DefaultInstance) {
            result.volumeInfoResponse_ = global::Server.Protocol.LdpVolumeInfoResponse.CreateBuilder(result.volumeInfoResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.volumeInfoResponse_ = value;
        }
        result.hasVolumeInfoResponse = true;
        return this;
      }
      public Builder ClearVolumeInfoResponse() {
        PrepareBuilder();
        result.hasVolumeInfoResponse = false;
        result.volumeInfoResponse_ = null;
        return this;
      }
    }
    static LdpPacket() {
      object.ReferenceEquals(global::Server.Protocol.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpPreparableInfoRequest : pb::GeneratedMessage<LdpPreparableInfoRequest, LdpPreparableInfoRequest.Builder> {
    private LdpPreparableInfoRequest() { }
    private static readonly LdpPreparableInfoRequest defaultInstance = new LdpPreparableInfoRequest().MakeReadOnly();
    private static readonly string[] _ldpPreparableInfoRequestFieldNames = new string[] { "Type" };
    private static readonly uint[] _ldpPreparableInfoRequestFieldTags = new uint[] { 8 };
    public static LdpPreparableInfoRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpPreparableInfoRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpPreparableInfoRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpPreparableInfoRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpPreparableInfoRequest, LdpPreparableInfoRequest.Builder> InternalFieldAccessors {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpPreparableInfoRequest__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::Server.Protocol.ConnectionType type_ = global::Server.Protocol.ConnectionType.REMOTE_DESKTOP_CONTROL;
    public bool HasType {
      get { return hasType; }
    }
    public global::Server.Protocol.ConnectionType Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpPreparableInfoRequestFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[0], (int) Type, Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpPreparableInfoRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpPreparableInfoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpPreparableInfoRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpPreparableInfoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpPreparableInfoRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpPreparableInfoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpPreparableInfoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpPreparableInfoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpPreparableInfoRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpPreparableInfoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpPreparableInfoRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpPreparableInfoRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpPreparableInfoRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpPreparableInfoRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpPreparableInfoRequest result;
      
      private LdpPreparableInfoRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpPreparableInfoRequest original = result;
          result = new LdpPreparableInfoRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpPreparableInfoRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.Protocol.LdpPreparableInfoRequest.Descriptor; }
      }
      
      public override LdpPreparableInfoRequest DefaultInstanceForType {
        get { return global::Server.Protocol.LdpPreparableInfoRequest.DefaultInstance; }
      }
      
      public override LdpPreparableInfoRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpPreparableInfoRequest) {
          return MergeFrom((LdpPreparableInfoRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpPreparableInfoRequest other) {
        if (other == global::Server.Protocol.LdpPreparableInfoRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpPreparableInfoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpPreparableInfoRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Server.Protocol.ConnectionType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Server.Protocol.ConnectionType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Server.Protocol.ConnectionType.REMOTE_DESKTOP_CONTROL;
        return this;
      }
    }
    static LdpPreparableInfoRequest() {
      object.ReferenceEquals(global::Server.Protocol.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpPreparableDesktopInfoResponse : pb::GeneratedMessage<LdpPreparableDesktopInfoResponse, LdpPreparableDesktopInfoResponse.Builder> {
    private LdpPreparableDesktopInfoResponse() { }
    private static readonly LdpPreparableDesktopInfoResponse defaultInstance = new LdpPreparableDesktopInfoResponse().MakeReadOnly();
    private static readonly string[] _ldpPreparableDesktopInfoResponseFieldNames = new string[] { "ScreenHeight", "ScreenWidth" };
    private static readonly uint[] _ldpPreparableDesktopInfoResponseFieldTags = new uint[] { 16, 8 };
    public static LdpPreparableDesktopInfoResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpPreparableDesktopInfoResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpPreparableDesktopInfoResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpPreparableDesktopInfoResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpPreparableDesktopInfoResponse, LdpPreparableDesktopInfoResponse.Builder> InternalFieldAccessors {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpPreparableDesktopInfoResponse__FieldAccessorTable; }
    }
    
    public const int ScreenWidthFieldNumber = 1;
    private bool hasScreenWidth;
    private int screenWidth_;
    public bool HasScreenWidth {
      get { return hasScreenWidth; }
    }
    public int ScreenWidth {
      get { return screenWidth_; }
    }
    
    public const int ScreenHeightFieldNumber = 2;
    private bool hasScreenHeight;
    private int screenHeight_;
    public bool HasScreenHeight {
      get { return hasScreenHeight; }
    }
    public int ScreenHeight {
      get { return screenHeight_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpPreparableDesktopInfoResponseFieldNames;
      if (hasScreenWidth) {
        output.WriteInt32(1, field_names[1], ScreenWidth);
      }
      if (hasScreenHeight) {
        output.WriteInt32(2, field_names[0], ScreenHeight);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasScreenWidth) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ScreenWidth);
        }
        if (hasScreenHeight) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, ScreenHeight);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpPreparableDesktopInfoResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpPreparableDesktopInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpPreparableDesktopInfoResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpPreparableDesktopInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpPreparableDesktopInfoResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpPreparableDesktopInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpPreparableDesktopInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpPreparableDesktopInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpPreparableDesktopInfoResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpPreparableDesktopInfoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpPreparableDesktopInfoResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpPreparableDesktopInfoResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpPreparableDesktopInfoResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpPreparableDesktopInfoResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpPreparableDesktopInfoResponse result;
      
      private LdpPreparableDesktopInfoResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpPreparableDesktopInfoResponse original = result;
          result = new LdpPreparableDesktopInfoResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpPreparableDesktopInfoResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.Protocol.LdpPreparableDesktopInfoResponse.Descriptor; }
      }
      
      public override LdpPreparableDesktopInfoResponse DefaultInstanceForType {
        get { return global::Server.Protocol.LdpPreparableDesktopInfoResponse.DefaultInstance; }
      }
      
      public override LdpPreparableDesktopInfoResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpPreparableDesktopInfoResponse) {
          return MergeFrom((LdpPreparableDesktopInfoResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpPreparableDesktopInfoResponse other) {
        if (other == global::Server.Protocol.LdpPreparableDesktopInfoResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasScreenWidth) {
          ScreenWidth = other.ScreenWidth;
        }
        if (other.HasScreenHeight) {
          ScreenHeight = other.ScreenHeight;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpPreparableDesktopInfoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpPreparableDesktopInfoResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasScreenWidth = input.ReadInt32(ref result.screenWidth_);
              break;
            }
            case 16: {
              result.hasScreenHeight = input.ReadInt32(ref result.screenHeight_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasScreenWidth {
        get { return result.hasScreenWidth; }
      }
      public int ScreenWidth {
        get { return result.ScreenWidth; }
        set { SetScreenWidth(value); }
      }
      public Builder SetScreenWidth(int value) {
        PrepareBuilder();
        result.hasScreenWidth = true;
        result.screenWidth_ = value;
        return this;
      }
      public Builder ClearScreenWidth() {
        PrepareBuilder();
        result.hasScreenWidth = false;
        result.screenWidth_ = 0;
        return this;
      }
      
      public bool HasScreenHeight {
        get { return result.hasScreenHeight; }
      }
      public int ScreenHeight {
        get { return result.ScreenHeight; }
        set { SetScreenHeight(value); }
      }
      public Builder SetScreenHeight(int value) {
        PrepareBuilder();
        result.hasScreenHeight = true;
        result.screenHeight_ = value;
        return this;
      }
      public Builder ClearScreenHeight() {
        PrepareBuilder();
        result.hasScreenHeight = false;
        result.screenHeight_ = 0;
        return this;
      }
    }
    static LdpPreparableDesktopInfoResponse() {
      object.ReferenceEquals(global::Server.Protocol.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpRectangle : pb::GeneratedMessage<LdpRectangle, LdpRectangle.Builder> {
    private LdpRectangle() { }
    private static readonly LdpRectangle defaultInstance = new LdpRectangle().MakeReadOnly();
    private static readonly string[] _ldpRectangleFieldNames = new string[] { "Bottom", "Left", "Right", "Top" };
    private static readonly uint[] _ldpRectangleFieldTags = new uint[] { 32, 8, 24, 16 };
    public static LdpRectangle DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpRectangle DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpRectangle ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpRectangle__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpRectangle, LdpRectangle.Builder> InternalFieldAccessors {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpRectangle__FieldAccessorTable; }
    }
    
    public const int LeftFieldNumber = 1;
    private bool hasLeft;
    private int left_;
    public bool HasLeft {
      get { return hasLeft; }
    }
    public int Left {
      get { return left_; }
    }
    
    public const int TopFieldNumber = 2;
    private bool hasTop;
    private int top_;
    public bool HasTop {
      get { return hasTop; }
    }
    public int Top {
      get { return top_; }
    }
    
    public const int RightFieldNumber = 3;
    private bool hasRight;
    private int right_;
    public bool HasRight {
      get { return hasRight; }
    }
    public int Right {
      get { return right_; }
    }
    
    public const int BottomFieldNumber = 4;
    private bool hasBottom;
    private int bottom_;
    public bool HasBottom {
      get { return hasBottom; }
    }
    public int Bottom {
      get { return bottom_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLeft) return false;
        if (!hasTop) return false;
        if (!hasRight) return false;
        if (!hasBottom) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpRectangleFieldNames;
      if (hasLeft) {
        output.WriteInt32(1, field_names[1], Left);
      }
      if (hasTop) {
        output.WriteInt32(2, field_names[3], Top);
      }
      if (hasRight) {
        output.WriteInt32(3, field_names[2], Right);
      }
      if (hasBottom) {
        output.WriteInt32(4, field_names[0], Bottom);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLeft) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Left);
        }
        if (hasTop) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Top);
        }
        if (hasRight) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Right);
        }
        if (hasBottom) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Bottom);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpRectangle ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpRectangle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpRectangle ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpRectangle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpRectangle ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpRectangle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpRectangle ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpRectangle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpRectangle ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpRectangle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpRectangle MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpRectangle prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpRectangle, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpRectangle cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpRectangle result;
      
      private LdpRectangle PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpRectangle original = result;
          result = new LdpRectangle();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpRectangle MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.Protocol.LdpRectangle.Descriptor; }
      }
      
      public override LdpRectangle DefaultInstanceForType {
        get { return global::Server.Protocol.LdpRectangle.DefaultInstance; }
      }
      
      public override LdpRectangle BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpRectangle) {
          return MergeFrom((LdpRectangle) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpRectangle other) {
        if (other == global::Server.Protocol.LdpRectangle.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLeft) {
          Left = other.Left;
        }
        if (other.HasTop) {
          Top = other.Top;
        }
        if (other.HasRight) {
          Right = other.Right;
        }
        if (other.HasBottom) {
          Bottom = other.Bottom;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpRectangleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpRectangleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLeft = input.ReadInt32(ref result.left_);
              break;
            }
            case 16: {
              result.hasTop = input.ReadInt32(ref result.top_);
              break;
            }
            case 24: {
              result.hasRight = input.ReadInt32(ref result.right_);
              break;
            }
            case 32: {
              result.hasBottom = input.ReadInt32(ref result.bottom_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLeft {
        get { return result.hasLeft; }
      }
      public int Left {
        get { return result.Left; }
        set { SetLeft(value); }
      }
      public Builder SetLeft(int value) {
        PrepareBuilder();
        result.hasLeft = true;
        result.left_ = value;
        return this;
      }
      public Builder ClearLeft() {
        PrepareBuilder();
        result.hasLeft = false;
        result.left_ = 0;
        return this;
      }
      
      public bool HasTop {
        get { return result.hasTop; }
      }
      public int Top {
        get { return result.Top; }
        set { SetTop(value); }
      }
      public Builder SetTop(int value) {
        PrepareBuilder();
        result.hasTop = true;
        result.top_ = value;
        return this;
      }
      public Builder ClearTop() {
        PrepareBuilder();
        result.hasTop = false;
        result.top_ = 0;
        return this;
      }
      
      public bool HasRight {
        get { return result.hasRight; }
      }
      public int Right {
        get { return result.Right; }
        set { SetRight(value); }
      }
      public Builder SetRight(int value) {
        PrepareBuilder();
        result.hasRight = true;
        result.right_ = value;
        return this;
      }
      public Builder ClearRight() {
        PrepareBuilder();
        result.hasRight = false;
        result.right_ = 0;
        return this;
      }
      
      public bool HasBottom {
        get { return result.hasBottom; }
      }
      public int Bottom {
        get { return result.Bottom; }
        set { SetBottom(value); }
      }
      public Builder SetBottom(int value) {
        PrepareBuilder();
        result.hasBottom = true;
        result.bottom_ = value;
        return this;
      }
      public Builder ClearBottom() {
        PrepareBuilder();
        result.hasBottom = false;
        result.bottom_ = 0;
        return this;
      }
    }
    static LdpRectangle() {
      object.ReferenceEquals(global::Server.Protocol.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpScreenRequest : pb::GeneratedMessage<LdpScreenRequest, LdpScreenRequest.Builder> {
    private LdpScreenRequest() { }
    private static readonly LdpScreenRequest defaultInstance = new LdpScreenRequest().MakeReadOnly();
    private static readonly string[] _ldpScreenRequestFieldNames = new string[] {  };
    private static readonly uint[] _ldpScreenRequestFieldTags = new uint[] {  };
    public static LdpScreenRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpScreenRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpScreenRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpScreenRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpScreenRequest, LdpScreenRequest.Builder> InternalFieldAccessors {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpScreenRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpScreenRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpScreenRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpScreenRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpScreenRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpScreenRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpScreenRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpScreenRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpScreenRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpScreenRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpScreenRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpScreenRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpScreenRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpScreenRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpScreenRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpScreenRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpScreenRequest result;
      
      private LdpScreenRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpScreenRequest original = result;
          result = new LdpScreenRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpScreenRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.Protocol.LdpScreenRequest.Descriptor; }
      }
      
      public override LdpScreenRequest DefaultInstanceForType {
        get { return global::Server.Protocol.LdpScreenRequest.DefaultInstance; }
      }
      
      public override LdpScreenRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpScreenRequest) {
          return MergeFrom((LdpScreenRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpScreenRequest other) {
        if (other == global::Server.Protocol.LdpScreenRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpScreenRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpScreenRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static LdpScreenRequest() {
      object.ReferenceEquals(global::Server.Protocol.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpScreenResponse : pb::GeneratedMessage<LdpScreenResponse, LdpScreenResponse.Builder> {
    private LdpScreenResponse() { }
    private static readonly LdpScreenResponse defaultInstance = new LdpScreenResponse().MakeReadOnly();
    private static readonly string[] _ldpScreenResponseFieldNames = new string[] { "BaseLenght", "CompressedScreen", "Rect" };
    private static readonly uint[] _ldpScreenResponseFieldTags = new uint[] { 16, 10, 26 };
    public static LdpScreenResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpScreenResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpScreenResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpScreenResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpScreenResponse, LdpScreenResponse.Builder> InternalFieldAccessors {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpScreenResponse__FieldAccessorTable; }
    }
    
    public const int CompressedScreenFieldNumber = 1;
    private bool hasCompressedScreen;
    private pb::ByteString compressedScreen_ = pb::ByteString.Empty;
    public bool HasCompressedScreen {
      get { return hasCompressedScreen; }
    }
    public pb::ByteString CompressedScreen {
      get { return compressedScreen_; }
    }
    
    public const int BaseLenghtFieldNumber = 2;
    private bool hasBaseLenght;
    private int baseLenght_;
    public bool HasBaseLenght {
      get { return hasBaseLenght; }
    }
    public int BaseLenght {
      get { return baseLenght_; }
    }
    
    public const int RectFieldNumber = 3;
    private bool hasRect;
    private global::Server.Protocol.LdpRectangle rect_;
    public bool HasRect {
      get { return hasRect; }
    }
    public global::Server.Protocol.LdpRectangle Rect {
      get { return rect_ ?? global::Server.Protocol.LdpRectangle.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCompressedScreen) return false;
        if (!hasBaseLenght) return false;
        if (!hasRect) return false;
        if (!Rect.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpScreenResponseFieldNames;
      if (hasCompressedScreen) {
        output.WriteBytes(1, field_names[1], CompressedScreen);
      }
      if (hasBaseLenght) {
        output.WriteInt32(2, field_names[0], BaseLenght);
      }
      if (hasRect) {
        output.WriteMessage(3, field_names[2], Rect);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCompressedScreen) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, CompressedScreen);
        }
        if (hasBaseLenght) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, BaseLenght);
        }
        if (hasRect) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Rect);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpScreenResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpScreenResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpScreenResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpScreenResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpScreenResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpScreenResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpScreenResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpScreenResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpScreenResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpScreenResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpScreenResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpScreenResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpScreenResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpScreenResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpScreenResponse result;
      
      private LdpScreenResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpScreenResponse original = result;
          result = new LdpScreenResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpScreenResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.Protocol.LdpScreenResponse.Descriptor; }
      }
      
      public override LdpScreenResponse DefaultInstanceForType {
        get { return global::Server.Protocol.LdpScreenResponse.DefaultInstance; }
      }
      
      public override LdpScreenResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpScreenResponse) {
          return MergeFrom((LdpScreenResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpScreenResponse other) {
        if (other == global::Server.Protocol.LdpScreenResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCompressedScreen) {
          CompressedScreen = other.CompressedScreen;
        }
        if (other.HasBaseLenght) {
          BaseLenght = other.BaseLenght;
        }
        if (other.HasRect) {
          MergeRect(other.Rect);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpScreenResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpScreenResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCompressedScreen = input.ReadBytes(ref result.compressedScreen_);
              break;
            }
            case 16: {
              result.hasBaseLenght = input.ReadInt32(ref result.baseLenght_);
              break;
            }
            case 26: {
              global::Server.Protocol.LdpRectangle.Builder subBuilder = global::Server.Protocol.LdpRectangle.CreateBuilder();
              if (result.hasRect) {
                subBuilder.MergeFrom(Rect);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Rect = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCompressedScreen {
        get { return result.hasCompressedScreen; }
      }
      public pb::ByteString CompressedScreen {
        get { return result.CompressedScreen; }
        set { SetCompressedScreen(value); }
      }
      public Builder SetCompressedScreen(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCompressedScreen = true;
        result.compressedScreen_ = value;
        return this;
      }
      public Builder ClearCompressedScreen() {
        PrepareBuilder();
        result.hasCompressedScreen = false;
        result.compressedScreen_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasBaseLenght {
        get { return result.hasBaseLenght; }
      }
      public int BaseLenght {
        get { return result.BaseLenght; }
        set { SetBaseLenght(value); }
      }
      public Builder SetBaseLenght(int value) {
        PrepareBuilder();
        result.hasBaseLenght = true;
        result.baseLenght_ = value;
        return this;
      }
      public Builder ClearBaseLenght() {
        PrepareBuilder();
        result.hasBaseLenght = false;
        result.baseLenght_ = 0;
        return this;
      }
      
      public bool HasRect {
       get { return result.hasRect; }
      }
      public global::Server.Protocol.LdpRectangle Rect {
        get { return result.Rect; }
        set { SetRect(value); }
      }
      public Builder SetRect(global::Server.Protocol.LdpRectangle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRect = true;
        result.rect_ = value;
        return this;
      }
      public Builder SetRect(global::Server.Protocol.LdpRectangle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRect = true;
        result.rect_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRect(global::Server.Protocol.LdpRectangle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRect &&
            result.rect_ != global::Server.Protocol.LdpRectangle.DefaultInstance) {
            result.rect_ = global::Server.Protocol.LdpRectangle.CreateBuilder(result.rect_).MergeFrom(value).BuildPartial();
        } else {
          result.rect_ = value;
        }
        result.hasRect = true;
        return this;
      }
      public Builder ClearRect() {
        PrepareBuilder();
        result.hasRect = false;
        result.rect_ = null;
        return this;
      }
    }
    static LdpScreenResponse() {
      object.ReferenceEquals(global::Server.Protocol.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpPreparableVolumeInfoResponse : pb::GeneratedMessage<LdpPreparableVolumeInfoResponse, LdpPreparableVolumeInfoResponse.Builder> {
    private LdpPreparableVolumeInfoResponse() { }
    private static readonly LdpPreparableVolumeInfoResponse defaultInstance = new LdpPreparableVolumeInfoResponse().MakeReadOnly();
    private static readonly string[] _ldpPreparableVolumeInfoResponseFieldNames = new string[] { "IsMute", "Volume" };
    private static readonly uint[] _ldpPreparableVolumeInfoResponseFieldTags = new uint[] { 16, 8 };
    public static LdpPreparableVolumeInfoResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpPreparableVolumeInfoResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpPreparableVolumeInfoResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpPreparableVolumeInfoResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpPreparableVolumeInfoResponse, LdpPreparableVolumeInfoResponse.Builder> InternalFieldAccessors {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpPreparableVolumeInfoResponse__FieldAccessorTable; }
    }
    
    public const int VolumeFieldNumber = 1;
    private bool hasVolume;
    private int volume_;
    public bool HasVolume {
      get { return hasVolume; }
    }
    public int Volume {
      get { return volume_; }
    }
    
    public const int IsMuteFieldNumber = 2;
    private bool hasIsMute;
    private bool isMute_;
    public bool HasIsMute {
      get { return hasIsMute; }
    }
    public bool IsMute {
      get { return isMute_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpPreparableVolumeInfoResponseFieldNames;
      if (hasVolume) {
        output.WriteInt32(1, field_names[1], Volume);
      }
      if (hasIsMute) {
        output.WriteBool(2, field_names[0], IsMute);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Volume);
        }
        if (hasIsMute) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IsMute);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpPreparableVolumeInfoResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpPreparableVolumeInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpPreparableVolumeInfoResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpPreparableVolumeInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpPreparableVolumeInfoResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpPreparableVolumeInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpPreparableVolumeInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpPreparableVolumeInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpPreparableVolumeInfoResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpPreparableVolumeInfoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpPreparableVolumeInfoResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpPreparableVolumeInfoResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpPreparableVolumeInfoResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpPreparableVolumeInfoResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpPreparableVolumeInfoResponse result;
      
      private LdpPreparableVolumeInfoResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpPreparableVolumeInfoResponse original = result;
          result = new LdpPreparableVolumeInfoResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpPreparableVolumeInfoResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.Protocol.LdpPreparableVolumeInfoResponse.Descriptor; }
      }
      
      public override LdpPreparableVolumeInfoResponse DefaultInstanceForType {
        get { return global::Server.Protocol.LdpPreparableVolumeInfoResponse.DefaultInstance; }
      }
      
      public override LdpPreparableVolumeInfoResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpPreparableVolumeInfoResponse) {
          return MergeFrom((LdpPreparableVolumeInfoResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpPreparableVolumeInfoResponse other) {
        if (other == global::Server.Protocol.LdpPreparableVolumeInfoResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVolume) {
          Volume = other.Volume;
        }
        if (other.HasIsMute) {
          IsMute = other.IsMute;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpPreparableVolumeInfoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpPreparableVolumeInfoResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVolume = input.ReadInt32(ref result.volume_);
              break;
            }
            case 16: {
              result.hasIsMute = input.ReadBool(ref result.isMute_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVolume {
        get { return result.hasVolume; }
      }
      public int Volume {
        get { return result.Volume; }
        set { SetVolume(value); }
      }
      public Builder SetVolume(int value) {
        PrepareBuilder();
        result.hasVolume = true;
        result.volume_ = value;
        return this;
      }
      public Builder ClearVolume() {
        PrepareBuilder();
        result.hasVolume = false;
        result.volume_ = 0;
        return this;
      }
      
      public bool HasIsMute {
        get { return result.hasIsMute; }
      }
      public bool IsMute {
        get { return result.IsMute; }
        set { SetIsMute(value); }
      }
      public Builder SetIsMute(bool value) {
        PrepareBuilder();
        result.hasIsMute = true;
        result.isMute_ = value;
        return this;
      }
      public Builder ClearIsMute() {
        PrepareBuilder();
        result.hasIsMute = false;
        result.isMute_ = false;
        return this;
      }
    }
    static LdpPreparableVolumeInfoResponse() {
      object.ReferenceEquals(global::Server.Protocol.LdpProtocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LdpVolumeInfoResponse : pb::GeneratedMessage<LdpVolumeInfoResponse, LdpVolumeInfoResponse.Builder> {
    private LdpVolumeInfoResponse() { }
    private static readonly LdpVolumeInfoResponse defaultInstance = new LdpVolumeInfoResponse().MakeReadOnly();
    private static readonly string[] _ldpVolumeInfoResponseFieldNames = new string[] { "IsMute", "Type", "Volume" };
    private static readonly uint[] _ldpVolumeInfoResponseFieldTags = new uint[] { 24, 8, 16 };
    public static LdpVolumeInfoResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LdpVolumeInfoResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LdpVolumeInfoResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpVolumeInfoResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LdpVolumeInfoResponse, LdpVolumeInfoResponse.Builder> InternalFieldAccessors {
      get { return global::Server.Protocol.LdpProtocol.internal__static_Server_Protocol_LdpVolumeInfoResponse__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::Server.Protocol.VolumeInfoType type_ = global::Server.Protocol.VolumeInfoType.VOLUME;
    public bool HasType {
      get { return hasType; }
    }
    public global::Server.Protocol.VolumeInfoType Type {
      get { return type_; }
    }
    
    public const int VolumeFieldNumber = 2;
    private bool hasVolume;
    private int volume_;
    public bool HasVolume {
      get { return hasVolume; }
    }
    public int Volume {
      get { return volume_; }
    }
    
    public const int IsMuteFieldNumber = 3;
    private bool hasIsMute;
    private bool isMute_;
    public bool HasIsMute {
      get { return hasIsMute; }
    }
    public bool IsMute {
      get { return isMute_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ldpVolumeInfoResponseFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[1], (int) Type, Type);
      }
      if (hasVolume) {
        output.WriteInt32(2, field_names[2], Volume);
      }
      if (hasIsMute) {
        output.WriteBool(3, field_names[0], IsMute);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Volume);
        }
        if (hasIsMute) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, IsMute);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LdpVolumeInfoResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpVolumeInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpVolumeInfoResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LdpVolumeInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LdpVolumeInfoResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpVolumeInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LdpVolumeInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LdpVolumeInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LdpVolumeInfoResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LdpVolumeInfoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LdpVolumeInfoResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LdpVolumeInfoResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LdpVolumeInfoResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LdpVolumeInfoResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LdpVolumeInfoResponse result;
      
      private LdpVolumeInfoResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LdpVolumeInfoResponse original = result;
          result = new LdpVolumeInfoResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LdpVolumeInfoResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Server.Protocol.LdpVolumeInfoResponse.Descriptor; }
      }
      
      public override LdpVolumeInfoResponse DefaultInstanceForType {
        get { return global::Server.Protocol.LdpVolumeInfoResponse.DefaultInstance; }
      }
      
      public override LdpVolumeInfoResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LdpVolumeInfoResponse) {
          return MergeFrom((LdpVolumeInfoResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LdpVolumeInfoResponse other) {
        if (other == global::Server.Protocol.LdpVolumeInfoResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasVolume) {
          Volume = other.Volume;
        }
        if (other.HasIsMute) {
          IsMute = other.IsMute;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ldpVolumeInfoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ldpVolumeInfoResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasVolume = input.ReadInt32(ref result.volume_);
              break;
            }
            case 24: {
              result.hasIsMute = input.ReadBool(ref result.isMute_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Server.Protocol.VolumeInfoType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Server.Protocol.VolumeInfoType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Server.Protocol.VolumeInfoType.VOLUME;
        return this;
      }
      
      public bool HasVolume {
        get { return result.hasVolume; }
      }
      public int Volume {
        get { return result.Volume; }
        set { SetVolume(value); }
      }
      public Builder SetVolume(int value) {
        PrepareBuilder();
        result.hasVolume = true;
        result.volume_ = value;
        return this;
      }
      public Builder ClearVolume() {
        PrepareBuilder();
        result.hasVolume = false;
        result.volume_ = 0;
        return this;
      }
      
      public bool HasIsMute {
        get { return result.hasIsMute; }
      }
      public bool IsMute {
        get { return result.IsMute; }
        set { SetIsMute(value); }
      }
      public Builder SetIsMute(bool value) {
        PrepareBuilder();
        result.hasIsMute = true;
        result.isMute_ = value;
        return this;
      }
      public Builder ClearIsMute() {
        PrepareBuilder();
        result.hasIsMute = false;
        result.isMute_ = false;
        return this;
      }
    }
    static LdpVolumeInfoResponse() {
      object.ReferenceEquals(global::Server.Protocol.LdpProtocol.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
